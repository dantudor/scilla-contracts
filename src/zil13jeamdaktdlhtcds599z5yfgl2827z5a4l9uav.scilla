(* ZPresale *)

(***************************************************)
(*                 Scilla version                  *)
(***************************************************)

scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import IntUtils BoolUtils
library ZPresale

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let optional_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let one32  = Uint32 1
let one128  = Uint128 1
let one256  = Uint256 1
let zero128  = Uint128 0
let zero256  = Uint256 0
let true = True
let false = False

let get_val128 = 
  fun (value: Option Uint128) =>
  let opt = @optional_value Uint128 in
  opt zero128 value 
    
let muldiv =
  fun (a: Uint128) =>
  fun (b: Uint128) =>
  fun (c: Uint128) =>
    let opt = @optional_value Uint256 in
    let opt2 = @optional_value Uint128 in
    let oa = builtin to_uint256 a in let ha = opt zero256 oa in
    let ob = builtin to_uint256 b in let hb = opt zero256 ob in
    let oc = builtin to_uint256 c in let hc = opt zero256 oc in
    let num = builtin mul ha hb in
    let hv =  builtin div num hc in
    let ov = builtin to_uint128 hv in
      opt2 zero128 ov
      
let muldiv_up =
  fun (a: Uint128) =>
  fun (b: Uint128) =>
  fun (c: Uint128) =>
    let opt = @optional_value Uint256 in
    let opt2 = @optional_value Uint128 in
    let oa = builtin to_uint256 a in let ha = opt zero256 oa in
    let ob = builtin to_uint256 b in let hb = opt zero256 ob in
    let oc = builtin to_uint256 c in let hc = opt zero256 oc in
    let num = builtin mul ha hb in
    let num_p = builtin add num hc in
    let num_p_1 = builtin sub num_p one256 in
    let hv =  builtin div num_p_1 hc in
    let ov = builtin to_uint128 hv in
      opt2 zero128 ov

(* Error exception *)
type Error =
  | CodeNotContractOwner
  | CodeInvalidParameter
  | CodeInvalidAmount
  | CodeNotStarted
  | CodeNotFinished
  | CodeStarted
  | CodeNotActive
  | CodeAlreadyClaimed
  | CodeInvalidOperation
  | CodeFinished
  | CodeNotEnded
  | CodeDeadline
  | CodeNotDeadline
  | CodeCooldown
  | CodeFinishedFallback
  
let make_error =
fun (result : Error) =>
  let result_code = 
    match result with
    | CodeNotContractOwner  => Int32 -1
    | CodeInvalidParameter  => Int32 -2
    | CodeInvalidAmount     => Int32 -3
    | CodeNotStarted        => Int32 -4
    | CodeNotFinished       => Int32 -5
    | CodeStarted           => Int32 -6
    | CodeNotActive         => Int32 -7
    | CodeAlreadyClaimed    => Int32 -8
    | CodeInvalidOperation  => Int32 -9
    | CodeFinished          => Int32 -10
    | CodeNotEnded          => Int32 -11
    | CodeDeadline          =>  Int32 -12
    | CodeNotDeadline       =>  Int32 -13
    | CodeCooldown          =>  Int32 -14
    | CodeFinishedFallback  =>  Int32 -15
    end
  in
  { _exception : "ZPresaleError"; code : result_code }
  
contract ZPresale
(
  owner : ByStr20,
  token : ByStr20,
  token_price: Uint128,
  target_maximum: Uint128, 
  target_minimum: Uint128, 
  cooldown: Uint32,
  deadline : Uint32
)

field contribution: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field claim_state: Map ByStr20 Uint32 = Emp ByStr20 Uint32
field total_contribution: Uint128 = zero128

field min_contribution: Uint128 = builtin mul token_price target_minimum
field max_contribution: Uint128 = builtin mul token_price target_maximum
field start_block: BNum = _creation_block
field end_block: BNum = _creation_block
field cooldown_block: BNum = _creation_block
field deadline_block: BNum = _creation_block
field started: Bool = false
field finished: Bool = false
field finished_fallback: Bool = false   
(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure SendZil(amount: Uint128, to_address : ByStr20)
  msg = { _tag : "AddFunds"; _recipient: to_address; _amount: amount };
  msgs = one_msg msg;
  send msgs
end

procedure SendToken(amount: Uint128, to_address : ByStr20)
  msg_to_token =  {
    _tag : "Transfer"; _recipient: token; _amount: zero128;
    to: to_address; amount: amount
  };
  msgs = one_msg msg_to_token;
  send msgs
end

procedure ReceiveZil(amount: Uint128)
  needs_refund = uint128_gt _amount amount;
  accept;
  match needs_refund with
  | True =>
    refund = builtin sub _amount amount;
    SendZil refund _sender
  | False => (* do nothing *)
  end
end

procedure ReceiveToken(amount: Uint128)
  msg_to_token = {
    _tag : "TransferFrom"; _recipient: token; _amount: zero128;
    from: _sender; to: _this_address; amount: amount
  };
  msgs = one_msg msg_to_token;
  send msgs
end

procedure ThrowNotSenderIsOwner()
  is_owner = builtin eq _sender owner;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotContractOwner;
    ThrowError err
  end
end

procedure ThrowIfStarted()
  is_start <- started;
  match is_start with
  | False =>
  | True =>
    err = CodeStarted;
    ThrowError err
  end
end

procedure ThrowNotStarted()
  is_start <- started;
  match is_start with
  | True =>
  | False =>
    err = CodeNotStarted;
    ThrowError err
  end
end

procedure ThrowNotAmount()
  is_valid = uint128_gt _amount token_price;
  match is_valid with
  | True =>
  | False =>
    err = CodeInvalidAmount;
    ThrowError err
  end
end

procedure ThrowNotActive()
  b <- &BLOCKNUMBER;
  startb <- start_block;
  endb <- end_block;
  is_active = 
    let before_start = builtin blt b startb in
    let after_eq_start = negb before_start in
    let before_end = builtin blt b endb in
    andb after_eq_start before_end;
  match is_active with
  | True =>
  | False =>
    err = CodeNotActive;
    ThrowError err
  end
end

procedure ThrowIfDeadline()
  b <- &BLOCKNUMBER;
  deadb <- deadline_block;
  is_finished <- finished;
  is_alive = let before_dead = builtin blt b deadb in
             orb is_finished before_dead;
  match is_alive with
  | True =>
  | False =>
    err = CodeDeadline;
    ThrowError err
  end
end

procedure ThrowNotDeadline()
  b <- &BLOCKNUMBER;
  deadb <- deadline_block;
  is_alive = builtin blt b deadb;
  match is_alive with
  | False =>
  | True =>
    err = CodeNotDeadline;
    ThrowError err
  end
end

procedure ThrowNotEnded()
  b <- &BLOCKNUMBER;
  endb <- end_block;
  before_end = builtin blt b endb;
  match before_end with
  | False =>
  | True =>
    err = CodeNotEnded;
    ThrowError err
  end
end

procedure ThrowIfCooldown()
  b <- &BLOCKNUMBER;
  coolb <- cooldown_block;
  is_cooldown = builtin blt b coolb;
  match is_cooldown with
  | False =>
  | True =>
    err = CodeCooldown;
    ThrowError err
  end
end

procedure ThrowNotFinished()
  b <- &BLOCKNUMBER;
  is_finished <- finished;
  match is_finished with
  | True =>
  | False =>
    err = CodeNotFinished;
    ThrowError err
  end
end

procedure ThrowIfFinished()
  b <- &BLOCKNUMBER;
  is_finished <- finished;
  match is_finished with
  | False =>
  | True =>
    err = CodeFinished;
    ThrowError err
  end
end

procedure ThrowIfFinishedFallback()
  b <- &BLOCKNUMBER;
  is_finished <- finished_fallback;
  match is_finished with
  | False =>
  | True =>
    err = CodeFinishedFallback;
    ThrowError err
  end
end

procedure ProcessFallbackRefund()
  some_current_contribution <- contribution[_sender];
  current_contribution = get_val128 some_current_contribution;
  SendZil current_contribution _sender;
  e = { _eventname: "RefundContribution"; 
    amount: current_contribution};
  event e
end

procedure ProcessClaim()
  total <- total_contribution;
  max <- max_contribution;
  min <- min_contribution;
  some_current_contribution <- contribution[_sender];
  current_contribution = get_val128 some_current_contribution;
  
  is_overflow = uint128_lt max total;
  is_underlow = uint128_lt total min;
  match is_underlow with
  | True =>
    SendZil current_contribution _sender;
    e = { _eventname: "RefundContribution"; 
      amount: current_contribution};
    event e
  | False =>
    real_contribution = 
      match is_overflow with
        | True =>
          muldiv current_contribution max total
        | False =>
          current_contribution
      end;
    token_amount = builtin div real_contribution token_price;
    spend_amount = match is_overflow with
        | True =>
          muldiv_up current_contribution max total
        | False =>
          builtin mul token_amount token_price
      end;
    needs_refund = uint128_gt current_contribution spend_amount; 
    match needs_refund with
    | False =>
    | True =>
      refund_amount = builtin sub current_contribution spend_amount;
      SendZil refund_amount _sender;
      e = { _eventname: "RefundContribution"; amount: refund_amount};
      event e
    end;
    needs_send = uint128_gt token_amount zero128; 
    match needs_send with
    | False =>
    | True =>
      SendToken token_amount _sender;
      e = { _eventname: "TokenClaimed"; amount: token_amount};
      event e
    end
  end
end

procedure ProcessFallbackTokenRefund()
  max <- max_contribution;
  max_token_amount = builtin div max token_price;
  SendToken max_token_amount owner;
  e = { _eventname: "RefundToken"; 
    amount: max_token_amount};
  event e
end

procedure ProcessFinish()
  total <- total_contribution;
  max <- max_contribution;
  min <- min_contribution;
  
  is_overflow = uint128_lt max total;
  is_underlow = uint128_lt total min;
  match is_underlow with
  | True =>
    max_token_amount = builtin div max token_price;
    SendToken max_token_amount owner;
    e = { _eventname: "RefundToken"; 
      amount: max_token_amount};
    event e
  | False =>
    fix_contribution = 
      match is_overflow with
        | True => max
        | False => total
      end;
    max_token_amount = builtin div max token_price;
    sold_token_amount = builtin div fix_contribution token_price;
    fund_amount = builtin mul sold_token_amount token_price;
    refund_token_amount = builtin sub max_token_amount sold_token_amount;
    needs_fund = uint128_gt fund_amount zero128; 
    match needs_fund with
    | False =>
    | True =>
      SendZil fund_amount owner;
      e = { _eventname: "FundSale"; amount: fund_amount};
      event e
    end;
    needs_refund_token = uint128_gt refund_token_amount zero128; 
    match needs_refund_token with
    | False =>
    | True =>
      SendToken refund_token_amount owner;
      e = { _eventname: "RefundToken"; amount: refund_token_amount};
      event e
    end
  end
end


procedure StartSale(start: BNum, endb: BNum)
  b <- &BLOCKNUMBER;
  is_valid_time =
    let in_future = builtin blt b start in
    let is_forward = builtin blt start endb in
    andb in_future is_forward;
  match is_valid_time with
    | True => 
    | False =>
      err = CodeInvalidParameter;
      ThrowError err
  end;
  deadb = builtin badd endb deadline;
  max = builtin mul token_price target_maximum;
  min = builtin mul token_price target_minimum;
  started := true;
  start_block := start;
  end_block := endb;
  deadline_block := deadb;
  min_contribution := min;
  max_contribution := max;
 
  ReceiveToken target_maximum;
  e = { _eventname: "SaleInitiated"; 
    start_block: start; end_block: endb; 
    min_contribution: min; max_contribution: max }
end
(**Transitions **)

transition Contribute()
  ThrowNotStarted;
  ThrowNotActive;
  ThrowNotAmount;
  accept;
  max <- max_contribution;
  total <- total_contribution;
  some_current_contribution <- contribution[_sender];
  current_contribution = get_val128 some_current_contribution;
  new_contribution = builtin add current_contribution _amount;
  is_overflow = uint128_lt max new_contribution;
  match is_overflow with
    | False =>
    | True =>
      err = CodeInvalidAmount;
      ThrowError err
  end;  
  new_total = builtin add total _amount;
  
  contribution[_sender] := new_contribution;
  total_contribution := new_total;
  e = { _eventname: "ContrubutionAdded"; 
    amount: _amount; new_contribution: new_contribution};
  event e
end

transition Claim()
  ThrowNotStarted;
  ThrowNotFinished;
  ThrowIfDeadline;
  ThrowIfCooldown;
  maybe_exists <- claim_state[_sender];
  match maybe_exists with
    | Some t =>
      err = CodeAlreadyClaimed;
      ThrowError err
    | None =>
      claim_state[_sender] := one32;
      ProcessClaim
  end
end

transition FinishSale()
  ThrowNotStarted;
  ThrowNotEnded;
  ThrowIfFinished;
  ThrowIfDeadline;
  is_finished <- finished;
  b <- &BLOCKNUMBER;
  coolb = builtin badd b cooldown;
  cooldown_block := coolb;
  finished := true;
  ProcessFinish
end

transition FallbackTokenRefund()
  ThrowNotDeadline;
  ThrowIfFinished;
  ThrowIfFinishedFallback;
  finished_fallback := true;
  ProcessFallbackTokenRefund
end

transition FallbackRefund()
  ThrowNotStarted;
  ThrowNotDeadline;
  ThrowIfFinished;
  maybe_exists <- claim_state[_sender];
  match maybe_exists with
    | Some t =>
      err = CodeAlreadyClaimed;
      ThrowError err
    | None =>
      claim_state[_sender] := one32;
      ProcessFallbackRefund
  end
end

transition InitiateSale(start: BNum, duration: Uint32)
  ThrowNotSenderIsOwner;
  ThrowIfStarted;
  endb = builtin badd start duration;
  StartSale start endb
end

transition InitiateSaleNow(duration: Uint32)
  ThrowNotSenderIsOwner;
  ThrowIfStarted;
  b <- &BLOCKNUMBER;
  start = builtin badd b one32;
  endb = builtin badd start duration;
  StartSale start endb
end

transition InitiateSaleIn(delay: Uint32, duration: Uint32)
  ThrowNotSenderIsOwner;
  ThrowIfStarted;
  b <- &BLOCKNUMBER;
  start = builtin badd b delay;
  endb = builtin badd start duration;
  StartSale start endb
end

(***************************************)
(*             Callbacks               *)
(***************************************)

transition RecipientAcceptTransferFrom(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  is_valid_transfer_to_self =
    let self_triggered = builtin eq initiator _this_address in
    let is_transfer_to_self = builtin eq recipient _this_address in
    andb self_triggered is_transfer_to_self;

  match is_valid_transfer_to_self with
  | False =>
    err = CodeInvalidOperation;
    ThrowError err
  | True => (* noop *)
  end
end

transition TransferFromSuccessCallBack(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  (*Do nothing*)
end

transition TransferSuccessCallBack(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  (*Do nothing*)
end
