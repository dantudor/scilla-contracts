scilla_version 0

(* Padron Contract *)
(* This example contract demonstrates how a CRUD app can be built. *)

(* @note: Padron allows members to manage a shared repository of products. *)
(* Padron has an owner, who can add members in. Members will be able *)
(* to add, remove and update products in the store. Access controls logic is *)
(* delibrately left out for brevity. But if you need examples, you can  *)
(* refer to `addMember` transition to see how access controls can be implemented. *)


(* In production deployments, you will want to implement proper access *)
(* control logic in your smart contract *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Recyclame

type CriptoRecyType =
| CriptoRecyType of String String String

type BlockProductType =
| BlockProductType of String ByStr20

type RegionType =
| RegionType of String ByStr20

type PartnerType =
| PartnerType of String String Uint128

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* error codes library *)
let code_success = Uint32 0
let code_product_not_found = Uint32 1
let code_not_authorized = Uint32 2
let code_invalid_params = Uint32 3
let code_productid_exist = Uint32 4

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract Recyclame
(owner: ByStr20,
collector: ByStr20,
padronName: String,
exchageRateInitial : Uint128,
decimals: Uint32
)

field cryptoRecy: Map String (CriptoRecyType)
                = Emp String (CriptoRecyType)                

field blockProduct: Map String (BlockProductType)
                = Emp String (BlockProductType) 
                
field regions: Map String (RegionType)
                = Emp String (RegionType)  
                           
field exchageRate : Uint128 =  exchageRateInitial

field partners: Map String (PartnerType)
                = Emp String (PartnerType)
     
(* ======== transitions ===============*)


(* @notice: Allows a `_sender` to add a product to the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to add a product. *)
(* @param: productName : title of the product *)
(* @param: author:     author of the product *)

(* ======== transitions ===============*)


(* @notice: Allows a `_sender` to add a product to the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to add a product. *)
(* @param: productName : title of the product *)
(* @param: author:     author of the product *)

transition addCrypoRecy(name:String, network:String, address:String)

    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)

        cryptoRecys <- cryptoRecy;
        cryptoRecyExist = builtin contains cryptoRecys name;
        match cryptoRecyExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_cryptoRecy = CriptoRecyType name network address;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            cryptoRecy[name] := new_cryptoRecy;


            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a `_sender` to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removeCrypoRecy(name: String)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)
        delete cryptoRecy[name]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a `_sender` to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updateCrypoRecy(name:String, network:String, address:String)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)
    collectorExist = builtin eq collector _sender;
    match collectorExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        cryptoRecys <- cryptoRecy;
        cryptoRecyExist = builtin contains cryptoRecys name;
        match cryptoRecyExist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_cryptoRecy = CriptoRecyType name network address;
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            cryptoRecy[name] := new_cryptoRecy;
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end



(* ======== transitions ===============*)


transition addBlockProduct(name:String, address:ByStr20)

    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)

        blockProducts <- blockProduct;
        blockProductExist = builtin contains blockProducts name;
        match blockProductExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_blockProduct = BlockProductType name address;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            blockProduct[name] := new_blockProduct;


            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a `_sender` to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removeBlockProduct(name: String)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)
        delete blockProduct[name]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a `_sender` to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updateBlockProduct(name:String,  address:ByStr20)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)
    collectorExist = builtin eq collector _sender;
    match collectorExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        blockProducts <- blockProduct;
        blockProductExist = builtin contains blockProducts name;
        match blockProductExist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_blockProduct = BlockProductType name  address;
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            blockProduct[name] := new_blockProduct;
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end


(* ======== transitions ===============*)


transition addRegion(name:String, address:ByStr20)

    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)

        regionLocal <- regions;
        regionsExist = builtin contains regionLocal name;
        match regionsExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_regions = RegionType name address;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            regions[name] := new_regions;


            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a `_sender` to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removeRegion(name: String)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)
        delete regions[name]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a `_sender` to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updateRegion(name:String,  address:ByStr20)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)
    collectorExist = builtin eq collector _sender;
    match collectorExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        regionLocal <- regions;
        regionsExist = builtin contains regionLocal name;
        match regionsExist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_regions = RegionType name  address;
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            regions[name] := new_regions;
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end


(* ======== transitions ===============*)


transition addPartner(name:String, address:String, percentage:Uint128)

    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)

        partnerLocal <- partners;
        partnersExist = builtin contains partnerLocal name;
        match partnersExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_partners = PartnerType name address percentage;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            partners[name] := new_partners;


            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a `_sender` to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removePartner(name: String)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)
        delete partners[name]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a `_sender` to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updatePartner(name:String,  address:String, percentage:Uint128)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)
    collectorExist = builtin eq collector _sender;
    match collectorExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        partnerLocal <- partners;
        partnersExist = builtin contains partnerLocal name;
        match partnersExist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_partners = PartnerType name  address percentage;
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            partners[name] := new_partners;
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end


