scilla_version 0

(* Padron Contract *)
(* This example contract demonstrates how a CRUD app can be built. *)

(* @note: Padron allows members to manage a shared repository of products. *)
(* Padron has an owner, who can add members in. Members will be able *)
(* to add, remove and update products in the store. Access controls logic is *)
(* delibrately left out for brevity. But if you need examples, you can  *)
(* refer to `addMember` transition to see how access controls can be implemented. *)


(* In production deployments, you will want to implement proper access *)
(* control logic in your smart contract *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Recyclame


let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* error codes library *)
let code_success = Uint32 0
let code_product_not_found = Uint32 1
let code_not_authorized = Uint32 2
let code_invalid_params = Uint32 3
let code_productid_exist = Uint32 4

type RetailType =
| RetailType of String String String

type ProducerType =
| ProducerType of String String String String

type ChildrenType =
| ChildrenType of ByStr20 String String

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract Region
(owner: ByStr20,
collector: ByStr20,
name:String
)

field idWallet: Option String = None {String}

field apikey: Option String = None {String}

field retails: Map String (RetailType)
                = Emp String (RetailType)
                
field members: Map ByStr20 (Pair (String) (Uint32))
= Emp ByStr20 (Pair (String) (Uint32))

field producers: Map String (ProducerType)
                = Emp String (ProducerType)
                
field childrens: Map ByStr20 (ChildrenType)
                = Emp ByStr20 (ChildrenType)                

(* ======== transitions ===============*)

(* @notice: add member is an example. It is not used in other functions. *)
(* @dev: in real contracts, a developer can use a members mapping to manage *)
(* access controls to grant a user permission to perform certain actions *)
(* (e.g. add/remove products) *)

transition addMember(nameMember: String, addr: ByStr20, memberType: Uint32)

    (* Access control: Checking if sender is the owner of the Contract *)
    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        (* Only the owner can add member *)
        (* Check if membership type is valid. *)
        valid_type = let three = Uint32 3 in
                        builtin lt memberType three;
        match valid_type with
        | True =>
            (* First build the pair ADT *)
            p = Pair {(String) (Uint32)} nameMember memberType;
            members[addr] := p;

            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs 
        | False =>
            (* Code for the membership type is invalid *)
            msg = {_tag: "";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_invalid_params};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end
              
(* ======== transitions ===============*)

transition setIdWallet(newIdWallet:String )
    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        tmp = Some {String} newIdWallet;
        idWallet := tmp; 
        msg = {_tag: ""; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};

        msgs = one_msg msg;
        send msgs         
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs      
    end
end      
    
transition setApikey(newApikey:String )
    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        tmp = Some {String} newApikey;
        apikey := tmp; 
        msg = {_tag: ""; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};

        msgs = one_msg msg;
        send msgs         
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs      
    end
end      
        
transition addProducer(nameProducer:String, idWalletOperational:String, more_information:String, address:String)

    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)

        producerLocal <- producers;
        producersExist = builtin contains producerLocal nameProducer;
        match producersExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_producers = ProducerType nameProducer idWalletOperational more_information address;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            producers[nameProducer] := new_producers;


            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a _sender to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removeProducer(nameProducer: String)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)
        delete producers[nameProducer]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a _sender to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updateProducer(nameProducer:String, idWalletOperational:String, more_information:String, address:String)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)
    collectorExist = builtin eq collector _sender;
    match collectorExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        producerLocal <- producers;
        producersExist = builtin contains producerLocal nameProducer;
        match producersExist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_producers = ProducerType nameProducer idWalletOperational more_information address;
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            producers[nameProducer] := new_producers;
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end





transition addRetail(nameRetail:String, idWalletOperational:String, more_information:String)

    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)

        retailLocal <- retails;
        retailsExist = builtin contains retailLocal nameRetail;
        match retailsExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_retails = RetailType nameRetail idWalletOperational more_information;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            retails[nameRetail] := new_retails;


            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a _sender to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removeRetail(nameRetail: String)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)
        delete retails[nameRetail]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a _sender to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updateRetail(nameRetail:String, idWalletOperational:String, more_information:String)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)
    collectorExist = builtin eq collector _sender;
    match collectorExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        retailLocal <- retails;
        retailsExist = builtin contains retailLocal nameRetail;
        match retailsExist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_retails = RetailType nameRetail idWalletOperational more_information;
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            retails[nameRetail] := new_retails;
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end


(* ======== transitions ===============*)


transition addChildren(subRegion:ByStr20, nameSubRegion:String, more_information:String)

    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)

        childrenLocal <- childrens;
        childrensExist = builtin contains childrenLocal subRegion;
        match childrensExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_childrens = ChildrenType subRegion nameSubRegion more_information;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            childrens[subRegion] := new_childrens;


            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a _sender to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removeChildren(subRegion: ByStr20)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    collectorExist = builtin eq collector _sender;

    match collectorExist with
    | True => 
        (* Only the owner can add member *)
        delete childrens[subRegion]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a _sender to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updateChildren(subRegion:ByStr20, nameSubRegion:String, more_information:String)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)
    collectorExist = builtin eq collector _sender;
    match collectorExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        childrenLocal <- childrens;
        childrensExist = builtin contains childrenLocal subRegion;
        match childrensExist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_childrens = ChildrenType subRegion nameSubRegion more_information;
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            childrens[subRegion] := new_childrens;
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end



