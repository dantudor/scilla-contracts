(*               _ _  _____                                        *)
(*              (_) |/ ____|                                       *)
(*           _____| | (___  _   _ _ ____   _____ _   _             *)
(*          |_  / | |\___ \| | | | '__\ \ / / _ \ | | |            *)
(*           / /| | |____) | |_| | |   \ V /  __/ |_| |            *)
(*          /___|_|_|_____/ \__,_|_|    \_/ \___|\__, |            *)
(*          __      __         _ _                __/ |            *)
(*          \ \    / /        | | |              |___/             *)
(*           \ \  / /_ _ _   _| | |_                               *)
(*            \ \/ / _` | | | | | __|                              *)
(*             \  / (_| | |_| | | |_                               *)
(*              \/ \__,_|\__,_|_|\__|                              *)
(*                                                                 *)
(*                                                                 *)
(*                                                                 *)
(*                                                                 *)
(*                         zilsurvey.com                           *)

scilla_version 0
import BoolUtils

library ZilSurveyVault

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let zero = Uint128 0

let accepted_code = Uint32 0
let not_owner_code = Uint32 1

let true = True
  
contract ZilSurveyVault(owner: ByStr20)


(*----------------------------*)

(*        transitions         *)

(*----------------------------*)

transition withdraw(sendTo: ByStr20, amount: Uint128)
  sender_is_owner = builtin eq _sender owner;
    match sender_is_owner with
    | False =>
      msg = {_tag: "";
            _recipient: _sender;
            _amount: zero;
            code: not_owner_code};
      msgs = one_msg msg;
      send msgs
    | True =>
      msg = {_tag: "";
            _recipient: sendTo;
            _amount: amount;
            code: accepted_code};
      msgs = one_msg msg;
      send msgs
    end
end

transition deposit()
  accept;
  e = {_eventname : "deposit";
          user: _sender;
          amount: _amount};
  event e
end