scilla_version 0

(* Standard Libraries *)
import IntUtils BoolUtils


library ProxyUTO
let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg


let zero = Uint128 0
let hundred = Uint128 100

let true = True
let false = False

type Error =
  | CodeNotWhitelisted
  | CodeNotImplementation
  | CodeNotOwner
  | CodeContractPaused
  | CodeTokenDoesNotExists
  | CodeBelowMinimum


let make_error =
  fun (result : Error) =>
  let result_code = 
  match result with
  | CodeNotWhitelisted          => Int32 -31
  | CodeNotImplementation       => Int32 -32
  | CodeNotOwner                => Int32 -33
  | CodeContractPaused          => Int32 -34
  | CodeTokenDoesNotExists      => Int32 -35
  | CodeBelowMinimum            => Int32 -36
  end
  in
{ _exception : "Error"; code : result_code }


let get_val =
  fun (some_val: Option Uint128) =>
  match some_val with
  | Some val => val
  | None => zero
  end



(***************************************************)
(*             UTO contract definition             *)
(***************************************************)
contract ProxyUTO
(
    contract_owner: ByStr20,
    init_implementation_address : ByStr20,
    init_carbon_address: ByStr20,
    name: String,
    symbol: String,
    decimals: Uint32,
    init_supply: Uint128
)
(* Mutable fields *)
field owner_addr: ByStr20 = contract_owner
field pending_owner : Option ByStr20 = None {ByStr20}
field implementation_addr : ByStr20 = init_implementation_address
field carbon_address: ByStr20 = init_carbon_address


field tokenHeld: Uint128 = Uint128 0
field total_supply : Uint128 = zero
field balances : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field allowances: Map ByStr20 (Map ByStr20 Uint128) 
  = Emp ByStr20 (Map ByStr20 Uint128)


field contractPaused : Bool = True
field whitelistUsage : Bool = True
field whitelistedAddress: Map ByStr20 ByStr20 = Emp ByStr20 ByStr20

field approvedInvoice: Map ByStr20 ByStr20 = Emp ByStr20 ByStr20
field useApprovedInvoice : Bool = True

(* Procedures *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure isCarbonAddress(addr : ByStr20)
  cb <- carbon_address;
  is_cb = builtin eq cb addr;
  match is_cb with 
    |True => (*Carry On*)
    |False =>
      err = CodeNotImplementation;
      ThrowError err
  end
end


procedure isImplementation()
  implementationAddress <- implementation_addr;
  isImplementation = builtin eq implementationAddress _sender;
  match isImplementation with
    | False =>
      err = CodeNotImplementation;
      ThrowError err
    | True =>
  end
end

procedure isOwner()
  owner <- owner_addr;
  isOwner = builtin eq owner _sender;
  match isOwner with
    | True => (*Carry On*)
    | False =>
      err = CodeNotOwner;
      ThrowError err
  end
end

procedure isPaused()
  pause <- contractPaused;
  match pause with
    | True =>
      err = CodeContractPaused;
      ThrowError err
    | False =>(*Allow through*)
  end
end

procedure isWhitelist()
  wl <- exists whitelistedAddress[_sender];
  match wl with
    | True =>(*Address whitelisted continue*)
    | False =>
      err = CodeNotWhitelisted;
      ThrowError err
  end
end

procedure isApprovedInvoice(address: ByStr20)
  wl <- exists approvedInvoice[address];
  match wl with
    | True =>(*Address whitelisted continue*)
    | False =>
      err = CodeNotWhitelisted;
      ThrowError err
  end
end


(* Transitions *)
transition proxyMint(carb_amount_to_pay: Uint128)
  (*Check pause and whitelisting*)
  isPaused;
  wl <- whitelistUsage;
  match wl with
    | True =>
      isWhitelist
    | False =>
  end;
  carb_addr <- carbon_address;
  impl <- implementation_addr;
  msg = {_tag: "TransferFrom"; _recipient : carb_addr; _amount: zero; from: _sender; to: _this_address; amount: carb_amount_to_pay};
  msgs = one_msg msg;
  send msgs

end

transition mintCallBack(ownerAddr: ByStr20, buyerAddr: ByStr20, owner_bal: Uint128, buyer_bal: Uint128, supply: Uint128, tokenAdded: Uint128)
  isImplementation;
  balances[buyerAddr] := buyer_bal;
  
  tok_bal <- tokenHeld;
  newBal = builtin add tok_bal tokenAdded;
  tokenHeld := newBal;
  
  e = {_eventname : "Minted";amount : buyer_bal; recipient : buyerAddr};
  event e;
  balances[ownerAddr] := owner_bal;
  e = {_eventname : "Minted";amount : owner_bal; recipient : ownerAddr};
  event e;
  total_supply := supply
end


transition proxySellTokens(tokens : Uint128)
  impl <- implementation_addr;
  msg = {_tag: "sellTokens"; _recipient : impl; _amount: Uint128 0; tokens : tokens; sellerAddress: _sender};
  msgs = one_msg msg;
  send msgs
end

transition sellCallBack(sellerAddr: ByStr20, seller_bal: Uint128, burnAmount: Uint128, supply: Uint128, amountToReturn: Uint128)
  isImplementation;
  balances[sellerAddr] := seller_bal;
  e = {_eventname: "Burnt"; burner: _sender; burn_account: sellerAddr; amount: burnAmount};
  event e;
  carbAddr <- carbon_address;
  msg = {_tag : "Transfer"; _recipient: carbAddr; _amount: zero;
          to: sellerAddr; amount: amountToReturn};
  msgs = one_msg msg;
  send msgs;
  
  total_supply := supply
end

transition addWhitelistedAddress(address: ByStr20)
  isOwner;
  whitelistedAddress[address] := address
end

transition removeWhitelistedAddress(address:ByStr20)
  isOwner;
  delete whitelistedAddress[address]
end

transition useWhitelist()
  isOwner;
  whitelistUsage := true
end

transition dontUseWhitelist()
  isOwner;
  whitelistUsage := false
end





transition addApprovedInvoiceAddress(address: ByStr20)
  isOwner;
  approvedInvoice[address] := address
end

transition removeApprovedInvoiceAddress(address:ByStr20)
  isOwner;
  delete approvedInvoice[address]
end

transition useApprovedInvoiceAddress()
  isOwner;
  useApprovedInvoice := true
end

transition dontUseApprovedInvoiceAddress()
  isOwner;
  useApprovedInvoice := false
end




transition changeImplementation(address: ByStr20)
  isOwner;
  implementation_addr := address;
  e_implementationChange = {_eventname : "ImplementationChanged"; address: address};
  event e_implementationChange
end

(*Change Owner of Contract*)
transition RequestOwnershipTransfer(new_owner : ByStr20)
  owner <- owner_addr;
  isOwner = builtin eq _sender owner;
  match isOwner with
    | True =>
      po = Some {ByStr20} new_owner;
      pending_owner := po
    | False =>
      err = CodeNotOwner;
      ThrowError err
  end
end

transition ConfirmOwnershipTransfer()
  optional_po <- pending_owner;
  match optional_po with
  | Some optional_po =>
      caller_is_new_owner = builtin eq _sender optional_po;
      match caller_is_new_owner with
      | True =>
          (* transfer ownership *)
          owner_addr := optional_po;
          none = None {ByStr20};
          pending_owner := none
      | False => (* the caller is not the new owner, do nothing*)
        err = CodeNotOwner;
        ThrowError err
      end
  | None => (* ownership transfer is not in-progress, do nothing *)
  end
end

transition pause()
  isOwner;
  contractPaused := true
end

transition UnpauseContract()
  isOwner;
  contractPaused := false
end

transition Transfer(to: ByStr20, amount: Uint128)
  (*Check pause and whitelisting*)
  isPaused;
  wl <- whitelistUsage;
  match wl with
    | True =>
      isWhitelist
    | False =>
  end;
  impl <- implementation_addr;
  msg = {_tag: "Transfer"; _recipient : impl; _amount: Uint128 0; from: _sender; to: to; amount: amount};
  msgs = one_msg msg;
  send msgs
end

transition TransferCallBack(from_addr: ByStr20, to_addr: ByStr20, from_bal: Uint128, to_bal: Uint128, amount: Uint128)
  isImplementation;
  balances[from_addr] := from_bal;
  balances[to_addr] := to_bal;
  e = {_eventname : "TransferSuccess"; sender : from_addr; recipient : to_addr; amount : amount};
  event e
end

transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  (*Check pause and whitelisting*)
  isPaused;
  wl <- whitelistUsage;
  match wl with
    | True =>
      isWhitelist
    | False =>
  end;
  impl <- implementation_addr;
  msg = {_tag: "TransferFrom"; _recipient : impl; _amount: Uint128 0;initiator: _sender; from: from; to: to; amount: amount};
  msgs = one_msg msg;
  send msgs
end

transition TransferFromCallBack(from_addr: ByStr20, to_addr: ByStr20, from_bal: Uint128, to_bal: Uint128, amount: Uint128, spender_addr: ByStr20, new_allowance: Uint128)
  isImplementation;
  balances[from_addr] := from_bal;
  balances[to_addr] := to_bal;
  allowances[from_addr][spender_addr] := new_allowance;
  e = {_eventname : "TransferFromSuccess"; sender : from_addr; recipient : to_addr; amount : amount};
  event e
end

transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  (*Check pause and whitelisting*)
  isPaused;
  wl <- whitelistUsage;
  match wl with
    | True =>
      isWhitelist
    | False =>
  end;
  impl <- implementation_addr;
  msg = {_tag: "IncreaseAllowance"; _recipient : impl; _amount: Uint128 0;sender: _sender; spender: spender; amount: amount};
  msgs = one_msg msg;
  send msgs
end


transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  (*Check pause and whitelisting*)
  isPaused;
  wl <- whitelistUsage;
  match wl with
    | True =>
      isWhitelist
    | False =>
  end;
  impl <- implementation_addr;
  msg = {_tag: "DecreaseAllowance"; _recipient : impl; _amount: Uint128 0;sender: _sender; spender: spender; amount: amount};
  msgs = one_msg msg;
  send msgs
end

transition allowanceCallBack(from_addr: ByStr20, spender_addr: ByStr20, new_allowance: Uint128)
  isImplementation;
  allowances[from_addr][spender_addr] := new_allowance
end


transition TransferSuccessCallBack(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  token_exists <- carbon_address;
  isFromToken = builtin eq token_exists _sender;
  match isFromToken with
    | False =>
      err = CodeTokenDoesNotExists;
      ThrowError err
    | True =>
      totalHeld <- tokenHeld;
      newHeld = builtin sub totalHeld amount;
      tokenHeld := newHeld
  end
end

transition TransferFromSuccessCallBack(
  initiator: ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)

end

transition RecipientAcceptTransferFrom (initiator: ByStr20, sender : ByStr20, recipient: ByStr20, amount: Uint128)
    (*Is Carbon Contract Address Check*)
    isCarbonAddress _sender;
    impl <- implementation_addr;
    msg = {_tag: "Mint"; _recipient : impl; _amount: zero; 
              minter_addr : sender ; amount: amount};  (*Amount of carbs to be sent for minting*)
    msgs = one_msg msg;
    send msgs
end

transition RecipientAcceptTransfer(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
  isPaused;
  (*Add whitelist for invoice payments*)
  approv <- useApprovedInvoice;
  match approv with
    | True =>
      isApprovedInvoice sender
    | False=>
  end;
  token_exists <- carbon_address;
  isFromToken = builtin eq token_exists _sender;
  match isFromToken with
    | False =>
      err = CodeTokenDoesNotExists;
      ThrowError err
    | True =>
      
      totalTokenHeld <- tokenHeld;
      newTokenHeld = builtin add totalTokenHeld amount;
      tokenHeld := newTokenHeld;
      impl <- implementation_addr;
      (*send msg to update token rate*)
      msg = {_tag: "createInvoice"; _recipient : impl; _amount: zero; 
            amountPaid: newTokenHeld};
      msgs = one_msg msg;
      send msgs
  end
end
