scilla_version 0

(* Padron Contract *)
(* This example contract demonstrates how a CRUD app can be built. *)

(* @note: Padron allows members to manage a shared repository of products. *)
(* Padron has an owner, who can add members in. Members will be able *)
(* to add, remove and update products in the store. Access controls logic is *)
(* delibrately left out for brevity. But if you need examples, you can  *)
(* refer to `addMember` transition to see how access controls can be implemented. *)


(* In production deployments, you will want to implement proper access *)
(* control logic in your smart contract *)

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Padron

(* Nombre URI masInformacion PET PEAD PVC  *)
type Product =
| Product of String String String Uint32 Uint32 Uint32


let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* error codes library *)
let code_success = Uint32 0
let code_product_not_found = Uint32 1
let code_not_authorized = Uint32 2
let code_invalid_params = Uint32 3
let code_productid_exist = Uint32 4

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract Padron
(owner: ByStr20,
padronName: String)

(* padronName can be immutable if it won't ever be changed             *)


(* Membership data consists of three attributes: ByStr20, Name and typeOfMember*)
(* Equivalent member data in C++ struct *)
(* struct Member {                                                    *)
(*     ByStr20 address;                                               *)
(*     String name;                                                   *)
(*     Uint32 membershipType; // 0: Regular, 1: Premium, 2: Corporate *)
(* }                                                                  *)

field members: Map ByStr20 (Pair (String) (Uint32))
                = Emp ByStr20 (Pair (String) (Uint32))

(* lastProductID: last product ID issued *)
field lastProductID: Option String = None {String}

(* Productinventory will store a Map of Products                          
field productInventory: Map Uint32 (Pair (String) (Product))
                    = Emp Uint32 (Pair (String) (Product))*)

field productInventory: Map String (Product)
                    = Emp String (Product)

(* Product data consists of three attributes: ProductID, Title and Author*)
(* Equivalent member data in C++ struct *)
(* struct Product {                                                    *)
(*     Uint32 ProductID;                                               *)
(*     String Product_title;                                           *)
(*     String Author;                                               *)
(* }                                                                *)

(* ======== transitions ===============*)


(* @notice: add member is an example. It is not used in other functions. *)
(* @dev: in real contracts, a developer can use a members mapping to manage *)
(* access controls to grant a user permission to perform certain actions *)
(* (e.g. add/remove products) *)

transition addMember(name: String, addr: ByStr20, memberType: Uint32)

    (* Access control: Checking if sender is the owner of the Contract *)
    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        (* Only the owner can add member *)
        (* Check if membership type is valid. *)
        valid_type = let three = Uint32 3 in
                        builtin lt memberType three;
        match valid_type with
        | True =>
            (* First build the pair ADT *)
            p = Pair {(String) (Uint32)} name memberType;
            members[addr] := p;

            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs 
        | False =>
            (* Code for the membership type is invalid *)
            msg = {_tag: "";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_invalid_params};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a `_sender` to add a product to the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to add a product. *)
(* @param: productName : title of the product *)
(* @param: author:     author of the product *)

transition addProduct(name:String, uri:String, more_information:String, pet:Uint32, pead:Uint32,pvc:Uint32,productID:String)

(*  PVCX:Uint32, productID:Uint32*)

    (* @dev: Preconditions can be set to allow only members to add a product *)
    (* @dev: Access controls logic omitted for brevity *)

    members_local <- members;
    memberExist = builtin contains members_local _sender;

    match memberExist with
    | True => 
        (* Only the owner can add member *)

        products <- productInventory;
        (* new_product_id = let one = Uint32 1 in builtin add last_product_id one;*)

        productExist = builtin contains products productID;

        match productExist with
        | True =>
            msg = {_tag: "";
                        _recipient: _sender;
                        _amount: Uint128 0;
                        code: code_productid_exist};
            msgs = one_msg msg;
            send msgs
        | False =>
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_product = Product name uri more_information pet pead pvc;

            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            productInventory[productID] := new_product;

            tmp = Some {String} productID;
            lastProductID := tmp;

            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};

            msgs = one_msg msg;
            send msgs 
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end

(* @notice: Allows a `_sender` to remove a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition removeProduct(product_id: String)
    (* @dev: Preconditions can be set to allow only members to remove a product *)
    (* @dev: Access controls logic omitted for brevity *)
    members_local <- members;
    memberExist = builtin contains members_local _sender;

    match memberExist with
    | True => 
        (* Only the owner can add member *)
        delete productInventory[product_id]
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

(* @notice: Allows a `_sender` to update a product from the Padron *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a product. *)

transition updateProduct(product_id: String, name:String, uri:String, more_information:String, pet:Uint32, pead:Uint32,pvc:Uint32)
    (* @dev: Preconditions can be set to allow only members to update a product *)
    (* @dev: Access controls omitted for brevity *)

    members_local <- members;
    memberExist = builtin contains members_local _sender;
    
    match memberExist with
    | True => 
        (* Only the owner can add member *)
    
        (* preconditions  *)
        products <- productInventory;
        exist = builtin contains products product_id;
        match exist with
        | False =>
            (* Product ID is not found in the records. *)
            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_product_not_found};
            msgs = one_msg msg;
            send msgs
        | True =>
            (* constructs product model  *)
            (* Creating a new Product Model *)
            (* A new product model is a Pair of product_title and author *)
            new_product = Product name uri more_information pet pead pvc;


            (*new_product = Pair {(String) (String)} product_title author;*)
            (* Add the new product to the product_inventory Map, with ProductID as the key*)
            productInventory[product_id] := new_product;

            msg = {_tag: ""; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end

end

