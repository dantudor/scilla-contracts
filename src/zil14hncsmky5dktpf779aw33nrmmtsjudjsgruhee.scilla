scilla_version 0

import PairUtils
library DragonZILBreedLib

type Error =
  | CodeMinPrice
  | CodeNotMain
  | CodeNotZLP
  | CodeNotOwner
  | CodeSameDragon
  | CodeNotFound
  | CodeStageIncorrect

(* Custom ADT storing - aura, horns, scales, spots, tail, wings, body, eyes, head *)
type VisualGenes =
| VisualGenes of String String String String String String String String String

(* 10 Genes of attack *)
type CombatGenes =
| CombatGenes of String String String String String String String String String String


let zero128 = Uint128 0
let zero256 = Uint256 0
let zero32 = Uint32 0

let one32 = Uint32 1
let one_hundred128 = Uint128 100

let fifty256 = Uint256 50
let two256 = Uint256 2
let two128 = Uint128 2
let one256 = Uint256 1
let one_hundred256 = Uint256 100
let factor_60 = Uint256 1000000000000000000000000000000000000000000000000000000000000
let factor_54 = Uint256 1000000000000000000000000000000000000000000000000000000
let factor_48 = Uint256 1000000000000000000000000000000000000000000000000
let factor_42 = Uint256 1000000000000000000000000000000000000000000
let factor_36 = Uint256 1000000000000000000000000000000000000
let factor_30 = Uint256 1000000000000000000000000000000
let factor_24 = Uint256 1000000000000000000000000
let factor_18 = Uint256 1000000000000000000
let factor_12 = Uint256 1000000000000
let factor_6 = Uint256 1000000

let u32_42 = Uint32 42
let u32_40 = Uint32 40
let f0 = Uint32 3
let f1 = Uint32 5
let f2 = Uint32 7
let f3 = Uint32 9
let f4 = Uint32 11
let f5 = Uint32 13
let f6 = Uint32 17
let f7 = Uint32 19
let f8 = Uint32 21

let c0 = Uint32 2
let c1 = Uint32 4
let c2 = Uint32 6
let c3 = Uint32 8
let c4 = Uint32 10
let c5 = Uint32 12
let c6 = Uint32 14
let c7 = Uint32 16
let c8 = Uint32 18

let c9 = Uint32 20
let c10 = Uint32 22
let c11 = Uint32 24
let c12 = Uint32 26
let c13 = Uint32 28
let c14 = Uint32 30
let c15 = Uint32 32
let c16 = Uint32 34
let c17 = Uint32 36
let c18 = Uint32 38

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20
let option_uint256 = @option_value Uint256
let option_uint128 = @option_value Uint128
let option_uint32 = @option_value Uint32

let first = @fst Uint128 ByStr20
let second = @snd Uint128 ByStr20

(* Convert a string to uint256 number *)
let str_to_u256 =
  fun (s: String) =>
    let some_v = builtin to_uint256 s in
      option_uint256 zero256 some_v

let random =
  fun (entropy: Uint256) =>
  fun (block_number: BNum) =>
  fun (addr: ByStr20) =>
    let addr_hash = builtin keccak256hash addr in
    let entropy_hash = builtin keccak256hash entropy in
    let blockhash = builtin keccak256hash block_number in
    let ehash = builtin concat entropy_hash blockhash in
    let ahash = builtin concat ehash addr_hash in
    let last_hash = builtin concat ehash ahash in
    let hash = builtin keccak256hash last_hash in
      builtin to_uint256 hash

let split =
  fun (gens: Uint256) =>
  fun (factor: Uint256) =>
    let n = builtin div gens factor in
      builtin rem n factor_6

let cut_gen =
  fun (g0: Uint256) =>
  fun (g1: Uint256) =>
  fun (n: Uint256) =>
  fun (f: Uint256) =>
    let is_half = builtin lt n fifty256 in
      match is_half with
      | True =>
        split g0 f
      | False =>
        split g1 f
      end

let concat_gens_image =
  fun (gen1: Uint256) =>
  fun (gen2: Uint256) =>
  fun (gen3: Uint256) =>
  fun (gen4: Uint256) =>
  fun (gen5: Uint256) =>
    let g1 = builtin mul gen1 factor_24 in
    let g2 = builtin mul gen2 factor_18 in
    let g3 = builtin mul gen3 factor_12 in
    let g4 = builtin mul gen4 factor_6 in
    let gens = builtin add g1 g2 in
    let gens = builtin add gens g3 in
    let gens = builtin add gens g4 in
      builtin add gens gen5

let concat_gens_combat =
  fun (gen0: Uint256) =>
  fun (gen1: Uint256) =>
  fun (gen2: Uint256) =>
  fun (gen3: Uint256) =>
  fun (gen4: Uint256) =>
  fun (gen5: Uint256) =>
  fun (gen6: Uint256) =>
  fun (gen7: Uint256) =>
  fun (gen8: Uint256) =>
  fun (gen9: Uint256) =>
  fun (gen10: Uint256) =>
    let g0 = builtin mul gen0 factor_60 in
    let g1 = builtin mul gen1 factor_54 in
    let g2 = builtin mul gen2 factor_48 in
    let g3 = builtin mul gen3 factor_42 in
    let g4 = builtin mul gen4 factor_36 in
    let g5 = builtin mul gen5 factor_30 in
    let g6 = builtin mul gen6 factor_24 in
    let g7 = builtin mul gen7 factor_18 in
    let g8 = builtin mul gen8 factor_12 in
    let g9 = builtin mul gen9 factor_6 in
    let gens = builtin add g0 g1 in
    let gens = builtin add gens g2 in
    let gens = builtin add gens g3 in
    let gens = builtin add gens g4 in
    let gens = builtin add gens g5 in
    let gens = builtin add gens g6 in
    let gens = builtin add gens g7 in
    let gens = builtin add gens g8 in
    let gens = builtin add gens g9 in
      builtin add gens gen10

let combinate_image_gens =
  fun (gens0: Uint256) =>
  fun (gens1: Uint256) =>
  fun (random: Uint256) =>
    let n = builtin rem random one_hundred256 in
    let is_half = builtin lt n fifty256 in
    let gen5 = match is_half with
    | True => builtin rem gens0 factor_6
    | False => builtin rem gens1 factor_6
    end in
    let r_next = builtin div random two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen4 = cut_gen gens0 gens1 n factor_6 in
    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen3 = cut_gen gens0 gens1 n factor_12 in
    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen2 = cut_gen gens0 gens1 n factor_18 in
    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let is_half = builtin lt n fifty256 in
    let gen1 = match is_half with
    | True => builtin div gens0 factor_24
    | False => builtin div gens1 factor_24
    end in
      concat_gens_image gen1 gen2 gen3 gen4 gen5

let combinate_combat_gens =
  fun (gens0: Uint256) =>
  fun (gens1: Uint256) =>
  fun (random: Uint256) =>
    let n = builtin rem random one_hundred256 in
    let is_half = builtin lt n fifty256 in
    let gen10 = match is_half with
    | True => builtin rem gens0 factor_6
    | False => builtin rem gens1 factor_6
    end in

    let r_next = builtin div random two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen9 = cut_gen gens0 gens1 n factor_6 in 

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen8 = cut_gen gens0 gens1 n factor_12 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen7 = cut_gen gens0 gens1 n factor_18 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen6 = cut_gen gens0 gens1 n factor_24 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen5 = cut_gen gens0 gens1 n factor_30 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen4 = cut_gen gens0 gens1 n factor_36 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen3 = cut_gen gens0 gens1 n factor_42 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen2 = cut_gen gens0 gens1 n factor_48 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let gen1 = cut_gen gens0 gens1 n factor_54 in

    let r_next = builtin div r_next two256 in
    let n = builtin rem r_next one_hundred256 in
    let is_half = builtin lt n fifty256 in
    let gen0 = match is_half with
    | True => builtin div gens0 factor_60
    | False => builtin div gens1 factor_60
    end in
      concat_gens_combat gen0 gen1 gen2 gen3 gen4 gen5 gen6 gen7 gen8 gen9 gen10

let str_to_u128 =
  fun (s: String) =>
    let some_v = builtin to_uint128 s in
      option_uint128 zero128 some_v

let next_gen_calc =
  fun (str: String) =>
  fun (f: Uint32) =>
  fun (l: Uint128) =>
  fun (c: Uint32) =>
    let str_n = builtin substr str f c in
    let n = str_to_u128 str_n in
      builtin add n l

(* Parse genes chain to type of visual genes. *)
let parse_face_genes =
  fun (g: Uint256) =>
    let str = builtin to_string g in
    let aura = next_gen_calc str f0 zero128 one32 in
    let horns = next_gen_calc str f1 aura one32 in
    let scales = next_gen_calc str f2 horns one32 in
    let spots = next_gen_calc str f3 scales one32 in
    let tail = next_gen_calc str f4 spots one32 in
    let wings = next_gen_calc str f5 tail one32 in
    let body = next_gen_calc str f6 wings one32 in
    let eyes = next_gen_calc str f7 body one32 in
      next_gen_calc str f8 eyes one32

let parse_combat_genes =
  fun (g: Uint256) =>
    let str = builtin to_string g in
    let length = builtin strlen str in
    let l = builtin sub length u32_42 in
    let s = builtin substr str l u32_40 in

    let a0 = next_gen_calc s zero32 zero128 c0 in
    let a1 = next_gen_calc s c0 a0 c0 in
    let a2 = next_gen_calc s c1 a1 c0 in
    let a3 = next_gen_calc s c2 a2 c0 in
    let a4 = next_gen_calc s c3 a3 c0 in
    let a5 = next_gen_calc s c4 a4 c0 in
    let a6 = next_gen_calc s c5 a5 c0 in
    let a7 = next_gen_calc s c6 a6 c0 in
    let a8 = next_gen_calc s c7 a7 c0 in
    let a9 = next_gen_calc s c8 a8 c0 in

    let d0 = next_gen_calc s c9 a9 c0 in
    let d1 = next_gen_calc s c10 d0 c0 in
    let d2 = next_gen_calc s c11 d1 c0 in
    let d3 = next_gen_calc s c12 d2 c0 in
    let d4 = next_gen_calc s c13 d3 c0 in
    let d5 = next_gen_calc s c14 d4 c0 in
    let d6 = next_gen_calc s c15 d5 c0 in
    let d7 = next_gen_calc s c16 d6 c0 in
    let d8 = next_gen_calc s c17 d7 c0 in
      next_gen_calc s c18 d8 c0

let get_price =
  fun (combat: Uint128) =>
  fun (face: Uint128) =>
  fun (deciaml: Uint128) =>
    let n0 = builtin div combat two128 in
    let n = builtin add n0 face in
      builtin mul n deciaml

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeMinPrice       => Int32 -1
      | CodeNotMain        => Int32 -2
      | CodeNotZLP         => Int32 -3
      | CodeNotOwner       => Int32 -4
      | CodeSameDragon     => Int32 -5
      | CodeNotFound       => Int32 -6
      | CodeStageIncorrect => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

contract DragonZILBreed
(
  contract_owner: ByStr20,
  main: ByStr20 with contract
    field token_gen_battle: Map Uint256 Uint256,
    field token_gen_image: Map Uint256 Uint256,
    field token_stage: Map Uint256 Uint32,
    field token_owners: Map Uint256 ByStr20
  end,
  wallet: ByStr20,
  zlp: ByStr20
)

field entropy : Uint256 = Uint256 42
field breed_commission : Uint128 = Uint128 10
field price_curve : Uint128 = Uint128 1000000000000000000

field waiting_list: Map Uint256 (Pair Uint128 ByStr20) = Emp Uint256 (Pair Uint128 ByStr20)

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure CheckIsSameDragon(token_id1: Uint256, token_id2: Uint256)
  is_same_dragon = builtin eq token_id1 token_id2;

  match is_same_dragon with
  | True =>
    err = CodeSameDragon;
    ThrowError err
  | False =>
  end
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure CheckToeknOwner(token_id: Uint256)
  some_owner <-& main.token_owners[token_id];
  owner = option_address _this_address some_owner;
  is_owner = builtin eq owner _sender;

  match is_owner with
  | True =>
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure CheckStage(token_id: Uint256)
  some_stage <-& main.token_stage[token_id];
  dragon_stage = option_uint32 zero32 some_stage;
  is_stage_egg = builtin lt dragon_stage one32;

  match is_stage_egg with
  | False =>
  | True =>
    err = CodeStageIncorrect;
    ThrowError err
  end
end

procedure MintDragons(to: ByStr20, toekn_gens: Pair Uint256 Uint256)
  mint_call = {
    _tag: "Mint";
    _recipient: main;
    _amount: Uint128 0;
    to: to;
    toekn_gens: toekn_gens
  };
  msgs = one_msg mint_call;
  send msgs
end

procedure CallTransferFrom(amount: Uint128, from: ByStr20, to: ByStr20)
  is_zero = builtin eq zero128 amount;

  match is_zero with
  | False =>
    call_transfer_zlp = {
      _tag: "TransferFrom";
      _recipient: zlp;
      _amount: Uint128 0;
      from: from;
      to: to;
      amount: amount
    };
    msgs = one_msg call_transfer_zlp;
    send msgs
  | True =>
  end
end

procedure SendRewards(token: Pair Uint128 ByStr20)
  commission <- breed_commission;

  value = first token;
  owner = second token;
  team_rewards = builtin mul value commission;
  team_rewards = builtin div team_rewards one_hundred128;
  amount = builtin sub value team_rewards;

  CallTransferFrom team_rewards _sender wallet;
  CallTransferFrom amount _sender owner
end

procedure Breed(who_id: Uint256, with_id: Uint256)
  some_whore <- waiting_list[with_id];
  entropyNumber <- entropy;
  current_block <- & BLOCKNUMBER;

  match some_whore with
  | Some whore =>
    some_token1_image <-& main.token_gen_image[who_id];
    some_token1_combat <-& main.token_gen_battle[who_id];

    some_token2_image <-& main.token_gen_image[with_id];
    some_token2_combat <-& main.token_gen_battle[with_id];

    token1_image = option_uint256 zero256 some_token1_image;
    token1_combat = option_uint256 zero256 some_token1_combat;

    token2_image = option_uint256 zero256 some_token2_image;
    token2_combat = option_uint256 zero256 some_token2_combat;

    SendRewards whore;

    r = random entropyNumber current_block _sender;
    r2 = builtin div r fifty256;

    image_gens = combinate_image_gens token2_image token1_image r;
    combat_gens = combinate_combat_gens token2_combat token1_combat r2;
    pair = Pair {Uint256 Uint256} image_gens combat_gens;

    delete waiting_list[with_id];
    entropy := r;

    MintDragons _sender pair
  | None =>
    err = CodeNotFound;
    ThrowError err
  end
end

transition Cancel(token_id: Uint256)
  CheckToeknOwner token_id;
  delete waiting_list[token_id]
end

transition Add(token_id: Uint256)
  CheckToeknOwner token_id;
  CheckStage token_id;

  deciaml <- price_curve;
  some_token1_image <-& main.token_gen_image[token_id];
  some_token1_combat <-& main.token_gen_battle[token_id];

  token_image = option_uint256 zero256 some_token1_image;
  token_combat = option_uint256 zero256 some_token1_combat;
  combat = parse_combat_genes token_combat;
  face = parse_face_genes token_image;
  price = get_price combat face deciaml;

  pair = Pair {Uint128 ByStr20} price _sender;
  waiting_list[token_id] := pair
end

transition ChangeCurve(new_curve: Uint128)
  IsContractOwner;

  price_curve := new_curve
end

transition ChangeCommission(new_commission: Uint128)
  IsContractOwner;

  breed_commission := new_commission
end

transition BreedStart(who_id: Uint256, with_id: Uint256)
  CheckToeknOwner who_id;
  CheckStage who_id;
  CheckIsSameDragon who_id with_id;
  Breed who_id with_id
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end