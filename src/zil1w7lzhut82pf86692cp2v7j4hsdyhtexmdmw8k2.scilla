scilla_version 0

import BoolUtils IntUtils

library BetGame

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg
  
(* Error events *)
type Error =
| CodeUnauthorized
| CodeGameAlreadyExists
| CodeInvalidWinner
| CodeBetAlreadyExists
| CodeIsNotOpenForBet
| CodeGameStatusNotAvailable
| CodeGameNotAvailable
| CodeGameNotCompleted
| CodeGameNotVerified
| CodeNotWinner
| CodeResultNotAvailable
| CodeBetNotAvailable
| CodePoolUnavailable 
| BetAmountInsufficient

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeUnauthorized              => Int32 -1
      | CodeGameAlreadyExists         => Int32 -2
      | CodeInvalidWinner             => Int32 -3
      | CodeBetAlreadyExists          => Int32 -4
      | CodeIsNotOpenForBet           => Int32 -5
      | CodeGameStatusNotAvailable    => Int32 -6
      | CodeGameNotAvailable          => Int32 -7
      | CodeGameNotCompleted          => Int32 -8
      | CodeGameNotVerified           => Int32 -9
      | CodeNotWinner                 => Int32 -10
      | CodeResultNotAvailable        => Int32 -11
      | CodeBetNotAvailable           => Int32 -12
      | CodePoolUnavailable           => Int32 -13
      | BetAmountInsufficient         => Int32 -14
      end
    in
    { _exception : "Error"; code : result_code }

let loose = Uint32 13

let zero = Uint32 0
let amount_zero = Uint128 0
let incr = Uint32 1
let host_fraction = Uint128 10

(* Game Status *)
let open_for_bet = Uint32 0
let started = Uint32 1
let completed = Uint32 2
let verified = Uint32 3

(* Game Bet Status *)
let not_redeemed = Uint32 0
let redeemed = Uint32 1

let winPool = Uint32 0
let loosePool = Uint32 1
let drawPool = Uint32 2


let redCChargeForFirst = Uint128 1000000000
let redCChargeAfterFirst = Uint128 10000000000

type GameData = | GameData of String String String ByStr20
(*type GameData = | GameData of HomeTeam AwayTeam StartingOn HostedBy*)
type Bet = | Bet of String ByStr20 Uint32 Uint128
(* Bet = | Bet of GameID PlayerAddress BetSelected Amount*)
type Result = | Result of String Uint32
(*type Result = | Result of FinalScore Winner*)

contract BetGame
(owner: ByStr20,
treasury: ByStr20,
oracle: ByStr20,
redC: ByStr20)
                          
field playerBets: Map ByStr20 (Map String String) (* Address => GameID => BetID*)
                = Emp ByStr20 (Map String String)
field games: Map String GameData (* GameID => GameData*)
                = Emp String GameData
field gameStatus: Map String Uint32 (* GameID => Status*)
                = Emp String Uint32
field results: Map String Result (* GameID => Result*)
                = Emp String Result
field bets: Map String Bet (* BetID => Bet*)
                = Emp String Bet
field betStatus: Map String Uint32 (* BetID => Status*)
                = Emp String Uint32
field totalWinPoolBet: Map String Uint32 (* GameID => Count*)
                = Emp String Uint32
field totalLoosePoolBet: Map String Uint32 (* GameID => Count*)
                = Emp String Uint32
field totalDrawPoolBet: Map String Uint32 (* GameID => Count*)
                = Emp String Uint32
field totalWinPoolBetAmount: Map String Uint128 (* GameID => Amount*)
                = Emp String Uint128
field totalLoosePoolBetAmount: Map String Uint128 (* GameID => Amount*)
                = Emp String Uint128
field totalDrawPoolBetAmount: Map String Uint128 (* GameID => Amount*)
                = Emp String Uint128
field totalDistributePool: Map String Uint128 (* GameID => Amount*)
                = Emp String Uint128
field totalPool: Map String Uint128 (* GameID => Amount*)
                = Emp String Uint128
field userHostedGamesCount: Map ByStr20 Uint32 (* Address => TotalGamesHosted*)
                = Emp ByStr20 Uint32
                
field oracleAddress : ByStr20 = oracle
field minimumBet: Uint128 = Uint128 20

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

(*User needs to call IncreaseAllowance transition in token contract first*)
procedure depositRedC(redCAmount: Uint128)
  msg_to_token =  {
    _tag : "TransferFrom";
    _recipient: redC;
    _amount: amount_zero;
    from: _sender;
    to: treasury;
    amount: redCAmount
  };
  msgs = one_msg msg_to_token;
  send msgs
end

procedure createNewGame(gameID: String, gameData: GameData)
    games[gameID] := gameData;
    gameStatus[gameID] := open_for_bet;
    
    e = {_eventname : "GameCreated"; host : _sender; gameID: gameID};
    event e
end

procedure initPool(gameID: String)
  totalWinPoolBet[gameID] := zero;
  totalLoosePoolBet[gameID] := zero;
  totalDrawPoolBet[gameID] := zero;
  totalWinPoolBetAmount[gameID] := amount_zero;
  totalDrawPoolBetAmount[gameID] := amount_zero;
  totalLoosePoolBetAmount[gameID] := amount_zero
end

procedure createBet(betID: String, gameID: String, bet: Bet)
    accept;
    bets[betID] := bet;
    playerBets[_sender][gameID] := betID;
    betStatus[betID] := not_redeemed;
    
    e = {_eventname : "BetPlaced"; sender : _sender; gameID: gameID; amount: _amount};
    event e;
    
    msg = {_tag: "depositFund"; 
          _recipient: treasury; 
          _amount: _amount};
    msgs = one_msg msg;
    send msgs
end

procedure placeBet(gameID: String, betID: String, betSelected: Uint32)
  new_bet = Bet gameID _sender betSelected _amount;
  createBet betID gameID new_bet
end

procedure updatePool(gameID: String, betSelected: Uint32)
    is_Win = builtin eq betSelected winPool;
    match is_Win with
      | True =>
        recentWinPoolBets <- totalWinPoolBet[gameID];
        match recentWinPoolBets with
          | Some v =>
            addWinPoolBet = builtin add v incr;
            totalWinPoolBet[gameID] := addWinPoolBet
          | None =>
            totalWinPoolBet[gameID] := incr
        end;
        recentWinPoolBetsAmount <- totalWinPoolBetAmount[gameID];
        match recentWinPoolBetsAmount with
          | Some v =>
            addWinPoolBetAmount = builtin add v _amount;
            totalWinPoolBetAmount[gameID] := addWinPoolBetAmount
          | None =>
            totalWinPoolBetAmount[gameID] := _amount
        end
      | False =>
        is_Loose = builtin eq betSelected loosePool;
        match is_Loose with
          | True =>
            recentLoosePoolBets <- totalLoosePoolBet[gameID];
            match recentLoosePoolBets with
              | Some v =>
                addLoosePoolBet = builtin add v incr;
                totalLoosePoolBet[gameID] := addLoosePoolBet
              | None =>
                totalLoosePoolBet[gameID] := incr
            end;
            recentLoosePoolBetsAmount <- totalLoosePoolBetAmount[gameID];
            match recentLoosePoolBetsAmount with
              | Some v =>
                addLoosePoolBetAmount = builtin add v _amount;
                totalLoosePoolBetAmount[gameID] := addLoosePoolBetAmount
              | None =>
                totalLoosePoolBetAmount[gameID] := _amount
            end
          | False =>
            is_Draw = builtin eq betSelected drawPool;
            match is_Draw with
              | True =>
                recentDrawPoolBets <- totalDrawPoolBet[gameID];
                match recentDrawPoolBets with
                  | Some v =>
                    addDrawPoolBet = builtin add v incr;
                    totalDrawPoolBet[gameID] := addDrawPoolBet
                  | None =>
                    totalDrawPoolBet[gameID] := incr
                end;
                recentDrawPoolBetsAmount <- totalDrawPoolBetAmount[gameID];
                match recentDrawPoolBetsAmount with
                  | Some v =>
                    addDrawPoolBetAmount = builtin add v _amount;
                    totalDrawPoolBetAmount[gameID] := addDrawPoolBetAmount
                  | None =>
                    totalDrawPoolBetAmount[gameID] := _amount
                end
              | False =>
                err = CodeInvalidWinner;
                ThrowError err
            end
        end
    end
  end
  
procedure flashResult(gameID: String, finalScore: String, winner: Uint32)
  new_result = Result finalScore winner;
  results[gameID] := new_result;
  
  e = {_eventname : "ResultFlashed"; gameID: gameID; finalScore: finalScore; winner: winner};
  event e
end

procedure setTotalPool(gameID: String, totalAmount: Uint128)
  percentage = Uint128 80;
  total = Uint128 100;
  totalPoolAmount = builtin mul percentage totalAmount;
  totalPoolFraction = builtin div totalPoolAmount total;
  
  totalDistributePool[gameID] := totalPoolFraction
end

procedure buildPool(gameID: String, winner: Uint32)
  temp_totalWinPoolBetAmount <- totalWinPoolBetAmount[gameID];
  temp_totalLoosePoolBetAmount <- totalLoosePoolBetAmount[gameID];
  temp_totalDrawPoolBetAmount <- totalDrawPoolBetAmount[gameID];
  
  match temp_totalWinPoolBetAmount with
    | Some v1 =>
      match temp_totalLoosePoolBetAmount with
      | Some v2 =>
        match temp_totalDrawPoolBetAmount with
        | Some v3 =>
          is_Win = builtin eq winner winPool;
          match is_Win with
            | True =>
              temp_totalWinPool = builtin add v2 v3;
              setTotalPool gameID temp_totalWinPool;
              totalPool[gameID] := v1
            | False =>
              is_Loose = builtin eq winner loosePool;
              match is_Loose with
                | True =>
                  temp_totalLoosePool = builtin add v1 v3;
                  setTotalPool gameID temp_totalLoosePool;
                  totalPool[gameID] := v2
                | False =>
                  is_Draw = builtin eq winner drawPool;
                  match is_Draw with
                    | True =>
                      temp_totalDrawPool = builtin add v1 v2;
                      setTotalPool gameID temp_totalDrawPool;
                      totalPool[gameID] := v3
                    | False =>
                      err = CodeInvalidWinner;
                      ThrowError err
                  end
              end
            end
        | None =>
          err = CodePoolUnavailable;
          ThrowError err
        end
      | None =>
        err = CodePoolUnavailable;
        ThrowError err
      end
    | None =>
      err = CodePoolUnavailable;
      ThrowError err
  end
end

procedure callForTreasury(redeem: Uint128)
  isAmountZero = builtin eq redeem amount_zero;
  match isAmountZero with
    | True =>
    | False =>
      msg = {_tag: "withdrawFund"; 
              _recipient: treasury; 
              _amount: _amount;
              address: _sender;
              amount: redeem
      };
      msgs = one_msg msg;
      send msgs
    end
end

procedure calculateRedeemFund(gameId: String, amount: Uint128)
  temp_totalPool <- totalPool[gameId];
  temp_totalDistributePool <- totalDistributePool[gameId];
  match temp_totalPool with
    | Some v1 =>
      match temp_totalDistributePool with
        | Some v2 =>
          temp_factor = builtin mul amount v2;
          temp_fraction = builtin div temp_factor v1;
          total_redeem = builtin add temp_fraction amount;
          callForTreasury total_redeem
        | None =>
          err = CodePoolUnavailable;
          ThrowError err
      end
    | None =>
      err = CodePoolUnavailable;
      ThrowError err
  end
end

procedure redeemHost(gameID: String)
  tempGame <- games[gameID];
  match tempGame with
  | Some v =>
    match v with
      | GameData homeTeam awayTeam startingOn hostedBy =>
        is_host = builtin eq hostedBy _sender;
        temp_totalDistributePool <- totalDistributePool[gameID];
        match temp_totalDistributePool with
          | Some v2 =>
            temp_fraction = builtin div v2 host_fraction;
            isAmountZero = builtin eq temp_fraction amount_zero;
            match isAmountZero with
              | True =>
              | False =>
                msg = {_tag: "withdrawFund"; 
                    _recipient: treasury; 
                    _amount: _amount;
                    address: hostedBy;
                    amount: temp_fraction
                };
                msgs = one_msg msg;
                send msgs
              end
          | None =>
            err = CodePoolUnavailable;
            ThrowError err
        end
    end
  | None =>
    err = CodeGameNotAvailable;
    ThrowError err
  end
end

procedure markGameAsVerified(gameID: String, winner: Uint32)
  temp_result <- results[gameID];
  match temp_result with
    | Some v1 =>
      isOwner = builtin eq owner _sender;
      match isOwner with
        | True =>
          temp_gameStatus <- gameStatus[gameID];
          match temp_gameStatus with
            | Some v2 =>
              hasCompleted = builtin eq v2 completed;
              match hasCompleted with
                | True =>
                  gameStatus[gameID] := verified;
                  buildPool gameID winner;
                  redeemHost gameID
                | False =>
                  err = CodeGameNotCompleted;
                  ThrowError err
                end
            | None =>
              err = CodeUnauthorized;
              ThrowError err
            end
        | False =>
          err = CodeUnauthorized;
          ThrowError err
        end
    | None =>   
      err = CodeResultNotAvailable;
      ThrowError err
    end
end

transition createGame(gameID: String, homeTeam: String, awayTeam: String, startingOn: String)
  game_check <- games[gameID];
  match game_check with
    | Some v1 =>
      err = CodeGameAlreadyExists;
      ThrowError err
    | None =>
      temp_userHostedGamesCount <- userHostedGamesCount[_sender];
      match temp_userHostedGamesCount with
        | Some v2 =>
          isFirstGame = builtin eq v2 zero;
          match  isFirstGame  with
            | True =>
              depositRedC redCChargeForFirst
            | False =>
              depositRedC redCChargeAfterFirst
          end;
          adduserHostedGamesCount = builtin add v2 incr;
          userHostedGamesCount[_sender] := adduserHostedGamesCount
        | None =>
          depositRedC redCChargeForFirst;
          userHostedGamesCount[_sender] := incr
      end;
      new_game = GameData homeTeam awayTeam startingOn _sender;
      createNewGame gameID new_game;
      initPool gameID
    end
end

transition bet(gameID: String, betID: String, betSelected: Uint32)
  temp_minBet <- minimumBet;
  isBetLow = builtin lt _amount temp_minBet;
  match isBetLow with
    | True =>
      err = BetAmountInsufficient;
      ThrowError err
    | False =>
      gameForBet <- games[gameID];
      match gameForBet with
        | Some v1 =>
          bet_check <- bets[gameID];
          match bet_check with
            | Some v2 =>
              err = CodeBetAlreadyExists;
              ThrowError err
            | None =>
              tempGamesForResponse <- gameStatus[gameID];
              match tempGamesForResponse with
              | Some v3 =>
                is_open_for_bet = builtin eq open_for_bet v3;
                match is_open_for_bet with
                  | True =>
                    updatePool gameID betSelected;
                    placeBet gameID betID betSelected
                  | False =>
                    err = CodeIsNotOpenForBet;
                    ThrowError err
                end
              | None =>
                err = CodeGameStatusNotAvailable;
                ThrowError err
              end
          end
        | None =>
          err = CodeGameNotAvailable;
          ThrowError err
        end
    end
end

transition gameStarted(gameID: String)
  gameToBeStarted <- games[gameID];
  match gameToBeStarted with
    | Some v =>
      temp_oracleAddress <- oracleAddress;
      is_oracle = builtin eq temp_oracleAddress _sender;
      match is_oracle with
        | True =>
          gameStatus[gameID] := started;
          e = {_eventname : "GameStarted"; gameID: gameID};
          event e
        | False =>
          err = CodeUnauthorized;
          ThrowError err
      end
    | None =>
      err = CodeGameNotAvailable;
      ThrowError err
    end
end

transition flashGameResults(gameID: String, finalScore: String, winner: Uint32)
  tempGame <- games[gameID];
    match tempGame with
    | Some v1 =>
      match v1 with
        | GameData homeTeam awayTeam startingOn hostedBy =>
          temp_oracleAddress <- oracleAddress;
          is_oracle = builtin eq temp_oracleAddress _sender;
          match is_oracle with
            | True =>
              gameStatus[gameID] := completed;
              flashResult gameID finalScore winner;
              temp_userHostedGamesCount <- userHostedGamesCount[hostedBy];
              match temp_userHostedGamesCount with
                | Some v2 =>
                  deduct_userHostedGamesCount = builtin sub v2 incr;
                  userHostedGamesCount[hostedBy] :=  deduct_userHostedGamesCount
                | None =>
                  userHostedGamesCount[hostedBy] :=  zero
              end
            | False =>
              err = CodeUnauthorized;
              ThrowError err
          end
      end
    | None =>
      err = CodeGameNotAvailable;
      ThrowError err
    end
end

transition verifyGameResults(gameID: String)
  gameToVerify <- games[gameID];
  match gameToVerify with
    | Some v1 =>
      temp_result <- results[gameID];
      match temp_result with
        | Some v2 =>
          match v2 with
            | Result finalScore winner =>
              markGameAsVerified gameID winner
          end
        | None =>
          err = CodeResultNotAvailable;
          ThrowError err
        end
    | None =>
      err = CodeGameNotAvailable;
      ThrowError err
    end
end

transition redeem(gameID: String)
gameToVerify <- games[gameID];
  match gameToVerify with
    | Some v1 =>
      temp_gameStatus <- gameStatus[gameID];
      match temp_gameStatus with
        | Some v2 =>
          game_status = v2;
              gameResult <- results[gameID];
              match gameResult with
                | Some v3 =>
                  match v3 with
                    | Result temp_finalScore temp_winner =>
                      isVerified = builtin eq verified game_status;
                      match isVerified with
                        | True =>
                          betID <- playerBets[_sender][gameID];
                          match betID with
                            | Some v4 =>
                              betStatus[v4] := redeemed;
                              playerBet <- bets[v4];
                              match playerBet with
                                | Some v5 =>
                                  match v5 with
                                  | Bet gameId playerAddress betSelected amount =>
                                    isWinner = builtin eq betSelected temp_winner;
                                    match isWinner with
                                      | True =>
                                        calculateRedeemFund gameID amount
                                      | False =>
                                        err = CodeNotWinner;
                                        ThrowError err
                                    end
                                  end
                                | None =>
                                  err = CodeBetNotAvailable;
                                  ThrowError err
                              end
                            | None =>
                              err = CodeBetNotAvailable;
                              ThrowError err
                          end
                        | False =>
                          err = CodeGameNotVerified;
                          ThrowError err
                      end
                  end
                | None =>
                  err = CodeResultNotAvailable;
                  ThrowError err
                end
            | None =>
              err = CodeGameStatusNotAvailable;
              ThrowError err
        end
    | None =>
      err = CodeGameNotAvailable;
      ThrowError err
    end
end

transition updateOracle(address: ByStr20)
  isOwner = builtin eq _sender owner;
  match isOwner with
    | True =>
      oracleAddress := address;
      e = {_eventname : "OracleUpdated"; sender : _sender};
      event e
    | False =>
      err = CodeUnauthorized;
      ThrowError err
  end
end

transition minimumBet(amount: Uint128)
  isOwner = builtin eq _sender owner;
  match isOwner with
    | True =>
      minimumBet := amount;
      e = {_eventname : "MinimumBetUpdated"; sender : _sender};
      event e
    | False =>
      err = CodeUnauthorized;
      ThrowError err
  end
end


transition RecipientAcceptTransferFrom(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

transition TransferFromSuccessCallBack(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

transition TransferSuccessCallBack(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end