scilla_version 0

import ListUtils IntUtils BoolUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library WalletLib

(* Event emitted when the contract is initialized *)
let mk_contract_initialized_event =
  { _eventname : "Contract initialized" }

(* Event for communicating a new transaction id *)
let mk_transaction_added_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction created" ;
     transactionId : tc }

(* Event for communicating that a transaction was signed *)
let mk_signed_transaction_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction signed"; transactionId : tc }

(* Event for communicating that a signature was revoked *)
let mk_signature_revoked_event =
  fun (tc : Uint32) =>
    { _eventname : "Signature revoked"; transactionId : tc }

type Error =
| NonOwnerCannotSign
| UnknownTransactionId
| InsufficientFunds
| NoSignatureListFound
| AlreadySigned
| NotAlreadySigned
| InvalidContract
| InvalidAmount
| NotEnoughSignatures
| SenderMayNotExecute
| NonOwnerCannotSubmit
| IncorrectSignatureCount

(* Error events *)
let mk_error_event =
  fun (err : Error) =>
  let err_code =
    match err with
    | NonOwnerCannotSign        => Int32 -1
    | UnknownTransactionId      => Int32 -2
    | InsufficientFunds         => Int32 -3
    | NoSignatureListFound      => Int32 -4
    | AlreadySigned             => Int32 -5
    | NotAlreadySigned          => Int32 -6
    | InvalidContract           => Int32 -7
    | InvalidAmount             => Int32 -8
    | NotEnoughSignatures       => Int32 -9
    | SenderMayNotExecute       => Int32 -10
    | NonOwnerCannotSubmit      => Int32 -11
    | IncorrectSignatureCount   => Int32 -12
    end in
  { _eventname : "WalletError" ; err_code : err_code }

let t = True
let f = False
let zero = Uint32 0
let one = Uint32 1
let transaction_inc = one

type TokenTransaction =
| TransferOwnership of ByStr20
| UpdatePauser of ByStr20
| Blacklist of ByStr20
| UnBlacklist of ByStr20
| UpdateBlacklister of ByStr20
| LawEnforcementWipingBurn of ByStr20
| UpdateMasterMinter of ByStr20
| IncreaseMinterAllowance of ByStr20 Uint128
| DecreaseMinterAllowance of ByStr20 Uint128
| Pause
| UnPause
| ProxyUpgradeTo of ByStr20
| ProxyChangeAdmin of ByStr20
| Transfer of ByStr20 Uint128
| TransferFrom of ByStr20 ByStr20 Uint128
| Burn of Uint128
| Mint of ByStr20 Uint128

type Transaction =
| NativeTransaction of ByStr20 Uint128 String
| CustomTokenTransaction of ByStr20 TokenTransaction


(* Make map of owners *)
let mk_owners_map =
  fun (owners : List ByStr20) =>
    let init = Emp ByStr20 Bool in
    let iter =
      fun (acc : Map ByStr20 Bool) =>
      fun (cur_owner : ByStr20) =>
        (* Add owner unconditionally. We check for duplicates later *)
        builtin put acc cur_owner t
        in
    let folder = @list_foldl ByStr20 (Map ByStr20 Bool) in
    folder iter init owners

(* Wrap single message into singleton list *)
let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Create native transaction message as singleton list *)
let native_transaction_msg_as_list =
  fun (recipient : ByStr20) =>
  fun (amount : Uint128) =>
  fun (tag : String) =>
    let msg = {_tag : tag; _recipient : recipient; _amount : amount } in
    one_msg msg

(* Create custom transaction message as singleton list *)
let custom_token_transaction_msg_as_list =
  fun (proxyTokenContract : ByStr20) =>
  fun (tokenTransaction : TokenTransaction) =>
    let msg =
      match tokenTransaction with
      | TransferOwnership newOwner =>
        (* proxyTransferOwnership (newOwner : ByStr20) *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyTransferOwnership" ;
         _amount : Uint128 0 ;
         newOwner : newOwner }
      | UpdatePauser newPauser =>
        (* proxyUpdatePauser      (newPauser : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyUpdatePauser" ;
         _amount : Uint128 0 ;
         newPauser : newPauser }
      | Blacklist address =>
        (* proxyBlacklist         (address : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyBlacklist" ;
         _amount : Uint128 0 ;
         address : address }
      | UnBlacklist address =>
        (* proxyUnBlacklist       (address : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyUnBlacklist" ;
         _amount : Uint128 0 ;
         address : address }
      | UpdateBlacklister newBlacklister =>
        (* proxyUpdateBlacklister (newBlacklister : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyUpdateBlacklister" ;
         _amount : Uint128 0 ;
         newBlacklister : newBlacklister }
      | LawEnforcementWipingBurn address =>
        (* proxyLawEnforcementWipingBurn (address : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyLawEnforcementWipingBurn" ;
         _amount : Uint128 0 ;
         address : address }
      | UpdateMasterMinter newMasterMinter =>
        (* proxyUpdateMasterMinter(newMasterMinter : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyUpdateMasterMinter" ;
         _amount : Uint128 0 ;
         newMasterMinter : newMasterMinter }
      | IncreaseMinterAllowance minter amount =>
        (* proxyIncreaseMinterAllowance(minter : ByStr20, amount : Uint128) *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyIncreaseMinterAllowance" ;
         _amount : Uint128 0 ;
         minter : minter ;
         amount : amount }
      | DecreaseMinterAllowance minter amount =>
        (* proxyDecreaseMinterAllowance(minter : ByStr20, amount : Uint128) *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyDecreaseMinterAllowance" ;
         _amount : Uint128 0 ;
         minter : minter }
      | Pause =>
        (* proxyPause             ()  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyPause" ;
         _amount : Uint128 0 }
      | Burn value =>
        (* Burn             (value : Uint128)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyBurn" ;
         _amount : Uint128 0 ;
         value : value }
      | Mint to value =>
        (* Mint             (to : ByStr20, value : Uint128)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyMint" ;
         _amount : Uint128 0 ;
         to : to ;
         value : value }
      | Transfer to value =>
        (* Transfer      (to : ByStr20, value : Uint128)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyTransfer" ;
         _amount : Uint128 0 ;
         to : to ;
         value : value }
      | TransferFrom from to value =>
        (* TransferFrom      (from : ByStr20, to : ByStr20, value : Uint128)  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyTransferFrom" ;
         _amount : Uint128 0 ;
         from : from ;
         to : to ;
         value : value }
      | UnPause =>
        (* proxyUnpause           ()  *)
        {_recipient : proxyTokenContract ;
         _tag : "proxyUnPause" ;
         _amount : Uint128 0 }
      | ProxyUpgradeTo newImplementation =>
        (* UpgradeTo         (newImplementation : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "upgradeTo" ;
         _amount : Uint128 0 ;
         newImplementation : newImplementation }
      | ProxyChangeAdmin newAdmin =>
        (* changeAdmin       (newAdmin : ByStr20)  *)
        {_recipient : proxyTokenContract ;
         _tag : "changeAdmin" ;
         _amount : Uint128 0 ;
         newAdmin : newAdmin }
      end
    in
    one_msg msg

contract Wallet
(
owners_list         : List ByStr20,
required_signatures : Uint32
)
with
  let len = @list_length ByStr20 in
  let no_of_owners = len owners_list in
  let owners_ok = builtin lt zero no_of_owners in
  let required_sigs_not_too_low = builtin lt zero required_signatures in
  let required_sigs_too_high = builtin lt no_of_owners required_signatures in
  let required_sigs_not_too_high = negb required_sigs_too_high in
  let required_sigs_ok = andb required_sigs_not_too_high required_sigs_not_too_low in
  let all_ok = andb required_sigs_ok owners_ok in
  (* Building the owners map is expensive, so avoid checking the owners map until *)
  (* everything else has been checked *)
  match all_ok with
  | True =>
    let owners_map = mk_owners_map owners_list in
    let size_of_owners_map = builtin size owners_map in
    builtin eq size_of_owners_map no_of_owners
  | False =>
    False
  end
=>

field owners           : Map ByStr20 Bool = mk_owners_map owners_list

field transactionCount : Uint32 = Uint32 0

field signatures       : Map Uint32 (Map ByStr20 Bool) =
  Emp Uint32 (Map ByStr20 Bool)

field signature_counts : Map Uint32 Uint32 =
  Emp Uint32 Uint32

field transactions     : Map Uint32 Transaction =
                           Emp Uint32 Transaction

procedure MakeError (err : Error)
  e = mk_error_event err;
  event e
end

procedure AddSignature (transactionId : Uint32, signee : ByStr20)
  sig <- exists signatures[transactionId][signee];
  match sig with
  | False =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      (* 0 signatures *)
      signature_counts[transactionId] := one
    | Some c =>
      new_c = builtin add c one;
      signature_counts[transactionId] := new_c
    end;
    signatures[transactionId][signee] := t;
    e = mk_signed_transaction_event transactionId;
    event e
  | True =>
    (* Already signed *)
    err = AlreadySigned;
    MakeError err
  end
end

procedure SubmitTransaction (transaction : Transaction)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSubmit;
    MakeError err
  | True =>
    tc <- transactionCount;
    transactions[tc] := transaction;
    AddSignature tc _sender;
    tc_new = builtin add tc transaction_inc;
    transactionCount := tc_new;
    e = mk_transaction_added_event tc;
    event e
  end
end

transition SubmitNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  zero = Uint128 0;
  amount_is_zero = builtin eq amount zero;
  match amount_is_zero with
  | True =>
    err = InvalidAmount;
    MakeError err
  | False =>
    transaction = NativeTransaction recipient amount tag;
    SubmitTransaction transaction
  end
end

procedure SubmitCustomTransaction (proxyTokenContract : ByStr20, tokenTransaction : TokenTransaction)
  transaction = CustomTokenTransaction proxyTokenContract tokenTransaction;
  SubmitTransaction transaction
end

transition SubmitCustomTransferOwnershipTransaction (proxyTokenContract : ByStr20, newOwner : ByStr20)
  transaction = TransferOwnership newOwner;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUpdatePauserTransaction (proxyTokenContract : ByStr20, newPauser : ByStr20)
  transaction = UpdatePauser newPauser;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomBlacklistTransaction (proxyTokenContract : ByStr20, address : ByStr20)
  transaction = Blacklist address;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUnBlacklistTransaction (proxyTokenContract : ByStr20, address : ByStr20)
  transaction = UnBlacklist address;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUpdateBlacklisterTransaction (proxyTokenContract : ByStr20, newBlacklister : ByStr20)
  transaction = UpdateBlacklister newBlacklister;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomLawEnforcementWipingBurnTransaction (proxyTokenContract : ByStr20, address : ByStr20)
  transaction = LawEnforcementWipingBurn address;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomBurnTransaction (proxyTokenContract : ByStr20, value : Uint128)
  transaction = Burn value;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomMintTransaction (proxyTokenContract : ByStr20, to : ByStr20, value : Uint128)
  transaction = Mint to value;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomTransferTransaction (proxyTokenContract : ByStr20, to : ByStr20, value : Uint128)
  transaction = Transfer to value;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomTransferFromTransaction (proxyTokenContract : ByStr20, from : ByStr20, to : ByStr20, value : Uint128)
  transaction = TransferFrom from to value;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUpdateMasterMinterTransaction (proxyTokenContract : ByStr20, newMasterMinter : ByStr20)
  transaction = UpdateMasterMinter newMasterMinter;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomIncreaseMinterAllowanceTransaction (proxyTokenContract : ByStr20, minter : ByStr20, amount : Uint128)
  transaction = IncreaseMinterAllowance minter amount;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomDecreaseMinterAllowanceTransaction (proxyTokenContract : ByStr20, minter : ByStr20, amount : Uint128)
  transaction = DecreaseMinterAllowance minter amount;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomPauseTransaction (proxyTokenContract : ByStr20)
  transaction = Pause;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomUnPauseTransaction (proxyTokenContract : ByStr20)
  transaction = UnPause;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomProxyUpgradeToTransaction (proxyTokenContract : ByStr20, newImplementation : ByStr20)
  transaction = ProxyUpgradeTo newImplementation;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SubmitCustomProxyChangeAdminTransaction (proxyTokenContract : ByStr20, newAdmin : ByStr20)
  transaction = ProxyChangeAdmin newAdmin;
  SubmitCustomTransaction proxyTokenContract transaction
end

transition SignTransaction (transactionId : Uint32)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSign;
    MakeError err
  | True =>
    (* Transaction must have been submitted *)
    transaction <- transactions[transactionId];
    match transaction with
    | None =>
      err = UnknownTransactionId;
      MakeError err
    | Some _ =>
      AddSignature transactionId _sender
    end
  end
end

transition RevokeSignature (transactionId : Uint32)
  sig <- exists signatures[transactionId][_sender];
  match sig with
  | False =>
    err = NotAlreadySigned;
    MakeError err
  | True =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      err = IncorrectSignatureCount;
      MakeError err
    | Some c =>
      c_is_zero = builtin eq c zero;
      match c_is_zero with
      | True =>
        err = IncorrectSignatureCount;
        MakeError err
      | False =>
        new_c = builtin sub c one;
        signature_counts[transactionId] := new_c;
        delete signatures[transactionId][_sender];
        e = mk_signature_revoked_event transactionId;
        event e
      end
    end
  end
end

procedure DeleteTransaction (transactionId : Uint32)
  delete transactions[transactionId];
  delete signatures[transactionId];
  delete signature_counts[transactionId]
end

procedure ExecuteNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  recipient_is_sender = builtin eq recipient _sender;
  sender_is_owner <- exists owners[_sender];
  sender_may_execute = orb recipient_is_sender sender_is_owner;
  match sender_may_execute with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    bal <- _balance;
    not_enough_money = builtin lt bal amount;
    match not_enough_money with
    | True =>
      err = InsufficientFunds;
      MakeError err
    | False =>
      msgs = native_transaction_msg_as_list recipient amount tag;
      send msgs
    end
  end
end

procedure ExecuteCustomTokenTransaction (proxyTokenContract : ByStr20, tokenTransaction : TokenTransaction)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    as_msg = custom_token_transaction_msg_as_list proxyTokenContract tokenTransaction;
    send as_msg
  end
end

transition ExecuteTransaction (transactionId : Uint32)
  transaction_opt <- transactions[transactionId];
  match transaction_opt with
  | None =>
    err = UnknownTransactionId;
    MakeError err
  | Some transaction =>
    sig_count_opt <- signature_counts[transactionId];
    match sig_count_opt with
    | None =>
      (* Signature count not found, even though the transaction exists.*)
      err = NoSignatureListFound;
      MakeError err
    | Some sig_count =>
      not_enough_signatures = builtin lt sig_count required_signatures;
      match not_enough_signatures with
      | True =>
        err = NotEnoughSignatures;
        MakeError err
      | False =>
        match transaction with
        | NativeTransaction recipient amount tag =>
          ExecuteNativeTransaction recipient amount tag
        | CustomTokenTransaction proxyTokenContract tokenTransaction =>
          ExecuteCustomTokenTransaction proxyTokenContract tokenTransaction
        end;
        DeleteTransaction transactionId
      end
    end
  end
end

transition AddFunds ()
  accept
end

transition TransferSuccessCallBack (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

transition RecipientAcceptTransfer (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

transition TransferFromSuccessCallBack (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

transition RecipientAcceptTransferFrom (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end
