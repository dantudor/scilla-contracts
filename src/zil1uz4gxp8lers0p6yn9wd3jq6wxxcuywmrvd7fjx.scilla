
(* sourceCodeHash=0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 *)
(* sourceCodeHashKey=hash_0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 *)
scilla_version 0


import BoolUtils ListUtils

library IgniteWallet

type Error =
| NotAuthorized
| InvalidSRSetup
| SRNotSetup
| InvalidSR
| WalletLocked
| InvalidCheque
| PubkeysAreNotUnique
| WrongRecoveryListLength
| RecoveryMsgPreconditionNotMet
| InvalidSignature
| GasFeeAnomaly
| PubkeyIsNull

let make_error =
fun (result: Error) =>
let result_code =
match result with
| NotAuthorized => Int32 -1
| InvalidSRSetup => Int32 -2
| SRNotSetup => Int32 -3
| InvalidSR => Int32 -4
| WalletLocked => Int32 -5
| InvalidCheque => Int32 -6
| PubkeysAreNotUnique => Int32 -7
| WrongRecoveryListLength => Int32 -8
| RecoveryMsgPreconditionNotMet => Int32 -9
| InvalidSignature => Int32 -10
| GasFeeAnomaly => Int32 -11
| PubkeyIsNull => Int32 -12
end
in
{ _exception: "Error"; code: result_code }

let one_msg = 
    fun(msg: Message) =>
    let nil_msg = Nil{Message} in Cons{Message} msg nil_msg

let zero = Uint128 0
let one = Uint128 1
let zil_100 = Uint128 100000000000000
let uint32_zero = Uint32 0
let zeroByStr0 = 0x
let zeroByStr = builtin to_bystr zeroByStr0
let zeroByStr20 = 0x0000000000000000000000000000000000000000
let zeroByStr33 = 0x000000000000000000000000000000000000000000000000000000000000000000

let option_value = tfun 'A => fun(default: 'A) => fun(input: Option 'A) =>
  match input with
  | Some v => v
  | None => default end
let option_uint128_value = let f = @option_value Uint128 in f zero
let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
let option_bystr33_value = let f = @option_value ByStr33 in f zeroByStr33


let commission_denominator = Uint128 10000

type Uint128Pair =
| Uint128Pair of Uint128 Uint128
let uint128_to_uint256: Uint128 -> Uint256 =
  fun (x: Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let muldiv: Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun (x: Uint128) =>
    fun (y: Uint128) =>
    fun (z: Uint128) =>
      let x256 = uint128_to_uint256 x in
      let y256 = uint128_to_uint256 y in
      let z256 = uint128_to_uint256 z in
      let x_mul_y256 = builtin mul x256 y256 in
      let res256 = builtin div x_mul_y256 z256 in
      let ores128 = builtin to_uint128 res256 in
      match ores128 with
      | None =>
        
        let max_uint128 = Uint128 340282366920938463463374607431768211455 in
        let fourtytwo128 = Uint128 42 in
        builtin mul max_uint128 fourtytwo128
      | Some res128 =>
        res128
      end

let sub_percentage_of_amt: Uint128 -> Uint128 -> Uint128Pair =
    fun (amount: Uint128) => fun (commission_numerator: Uint128) =>
    let commission = muldiv amount commission_numerator commission_denominator in
    let amount_sub_commission = builtin sub amount commission in
    let res = Uint128Pair amount_sub_commission commission in
    res

type Quadruplet =
| Quadruplet of Uint128 Uint128 Uint128 Uint128

let zilswap_params_sub_commission_with_discount: Uint128 -> Uint128 -> Uint128 -> Uint128 -> Quadruplet =
    fun (total1: Uint128) => fun (total2: Uint128) => fun (comm: Uint128) => fun (reputation_discount: Uint128) =>
    let res0 = sub_percentage_of_amt comm reputation_discount in
    match res0 with
    | Uint128Pair smaller_comm discount =>
        let res1 = sub_percentage_of_amt total1 smaller_comm in
        let res2 = sub_percentage_of_amt total2 smaller_comm in
        match res1 with
        | Uint128Pair amt1 comm1 =>
            match res2 with
            | Uint128Pair amt2 comm2 => Quadruplet amt1 comm1 amt2 comm2
            end
        end
    end

let add_funds = "AddFunds"
let false = False
let true = True


type SocialRecoverySet =
| NotSetup
| Setup of (List ByStr33) Uint32


type RecovererSignedMsg =
| RecovererSignedMsg of ByStr33 BNum ByStr64

let bystr33_list_len: List ByStr33 -> Uint32 = 
    fun (l: List ByStr33) =>
        let len = @list_length ByStr33 in len l
let recoverer_msg_list_len: List RecovererSignedMsg -> Uint32 = 
    fun (l: List RecovererSignedMsg) =>
        let len = @list_length RecovererSignedMsg in
        len l
let bystr33_has_elem: List ByStr33 -> ByStr33 -> Bool = 
    fun (l: List ByStr33) => fun (e: ByStr33) =>
        let bystr33_eq = fun(e1: ByStr33) => fun(e2: ByStr33) => builtin eq e1 e2 in
        let curried = bystr33_eq e in
        let has = @list_exists ByStr33 in
        has curried l
let pubkeys_are_unique: List ByStr33 -> Bool =
    fun(msgs: List ByStr33) =>
    let initial_len = bystr33_list_len msgs in
    let init_map: Map ByStr33 Bool = Emp ByStr33 Bool in
    let put_in_map: Map ByStr33 Bool -> ByStr33 -> Option Map ByStr33 Bool =
        fun(acc: Map ByStr33 Bool) => fun(pubkey: ByStr33) =>
            let tmp_acc = builtin put acc pubkey true in Some {Map ByStr33 Bool} tmp_acc in
    let fold = @list_foldl_while ByStr33 Map ByStr33 Bool in
    let pubkey_set = fold put_in_map init_map msgs in
    let pubkey_set_list = builtin to_list pubkey_set in
    let len = @list_length (Pair ByStr33 Bool) in
    let pubkey_set_list_len = len pubkey_set_list in
    builtin eq pubkey_set_list_len initial_len
let recoverer_msg_list_has_unique_pubkeys: List RecovererSignedMsg -> Bool =
    fun(msgs: List RecovererSignedMsg) =>
    let mapper = fun(msg: RecovererSignedMsg) => match msg with | RecovererSignedMsg pubkey valid sig => pubkey end in
    let map = @list_map RecovererSignedMsg ByStr33 in
    let mapped = map mapper msgs in
    pubkeys_are_unique mapped
let bystr20_list_len: List ByStr20 -> Uint32 =
    fun(l: List ByStr20) =>
    let len = @list_length ByStr20 in
    len l


let ssn_proxy = "ssn_proxy_v1"
let fee_collector = "fee_collector_v1"
let zilswap = "zilswap_v1"
let ignite_service_account_pubkey = "ignite_service_account_pubkey_v1"
let ignite_ssn = "ignite_ssn_v1"
let ssnlist_implementation = "ssnlist_v1"
let cookie_jar = "cookie_jar_v1"

let hash_list = tfun 'A =>
    fun(l: List 'A) =>
    let folder = fun(acc: ByStr) => fun(to_add: 'A) =>
        let hash = builtin sha256hash to_add in
        let hash_bystr = builtin to_bystr hash in
        builtin concat acc hash_bystr in
    let fold = @list_foldl 'A ByStr in
    fold folder zeroByStr l

let hash_bystr33_list = @hash_list ByStr33
let hash_bystr20_list = @hash_list ByStr20



type SignableArgs =
| RES of Uint128 String ByStr20
| B_RES of ByStr20 Uint128 String ByStr20
| BU_RES of ByStr20 Uint128 Uint128 String ByStr20
| BBU_RES of ByStr20 ByStr20 Uint128 Uint128 String ByStr20
| BUUNU_RES of ByStr20 Uint128 Uint128 BNum Uint128 Uint128 String ByStr20
| BBUNU_RES of ByStr20 ByStr20 Uint128 BNum Uint128 Uint128 String ByStr20
| BUBUNU_RES of ByStr20 Uint128 ByStr20 Uint128 BNum Uint128 Uint128 String ByStr20
| LB33U32_RES of (List ByStr33) Uint32 Uint128 String ByStr20
| LBLB_RES of (List ByStr20) (List ByStr20) Uint128 String ByStr20
| BLBLB_RES of ByStr20 (List ByStr20) (List ByStr20) Uint128 String ByStr20


type HashableArg =
| B of ByStr20
| U of Uint128
| U32 of Uint32
| BN of BNum


type TmpSwapZilToTokenParams =
| NoSwapZilToTokenParams
| TmpSwapZilToTokenParams of ByStr20 Uint128 BNum Uint128

let hash_signable_arg: HashableArg -> ByStr32 =
    fun(s: HashableArg)=> 
    match s with
    | B a => builtin sha256hash a
    | U a => builtin sha256hash a
    | U32 a => builtin sha256hash a
    | BN a => builtin sha256hash a
    end

let hash_concat: ByStr -> HashableArg -> ByStr =
    fun(prefix: ByStr) => fun(suffix: HashableArg) =>
    let bystr_32 = hash_signable_arg suffix in
    let bystr = builtin to_bystr bystr_32 in
    builtin concat prefix bystr

let hash_concat_nonce_string_addr: ByStr -> Uint128 -> String -> ByStr20 -> ByStr =
    fun(prefix: ByStr) => fun(nonce: Uint128) => fun(s: String) => fun(b0: ByStr20) =>
    let nh = builtin sha256hash nonce in
    let sh = builtin sha256hash s in
    let b0h = builtin sha256hash b0 in
    let c0 = builtin concat nh sh in
    let suffix = builtin concat c0 b0h in
    let suffix_bystr = builtin to_bystr suffix in
    builtin concat prefix suffix_bystr


let signable_to_cheque_hash: SignableArgs -> ByStr =
    fun(args: SignableArgs) =>
        match args with
            | RES nonce s b => 
                hash_concat_nonce_string_addr zeroByStr nonce s b
            | B_RES b0 nonce s b1 =>
                let c0 = let a0 = B b0 in hash_concat zeroByStr a0 in
                hash_concat_nonce_string_addr c0 nonce s b1
            | BU_RES b0 u nonce s b1 =>
                let c0 = let a0 = B b0 in hash_concat zeroByStr a0 in
                let c1 = let a1 = U u  in hash_concat        c0 a1 in
                hash_concat_nonce_string_addr c1 nonce s b1
            | BBU_RES b0 b1 u nonce s b2 => 
                let c0 = let a0 = B b0 in hash_concat zeroByStr a0 in
                let c1 = let a1 = B b1 in hash_concat        c0 a1 in
                let c2 = let a2 = U u  in hash_concat        c1 a2 in
                hash_concat_nonce_string_addr c2 nonce s b2
            | BUUNU_RES b0 u0 u1 n u2 nonce s b1 =>
                let c0 = let a0 = B  b0 in hash_concat zeroByStr a0 in
                let c1 = let a1 = U  u0 in hash_concat        c0 a1 in
                let c2 = let a2 = U  u1 in hash_concat        c1 a2 in
                let c3 = let a3 = BN n  in hash_concat        c2 a3 in
                let c4 = let a4 = U  u2 in hash_concat        c3 a4 in
                hash_concat_nonce_string_addr c4 nonce s b1
            | BBUNU_RES b0 b1 u0 n u1 nonce s b2 =>
                let c0 = let a0 = B  b0 in hash_concat zeroByStr a0 in
                let c1 = let a1 = B  b1 in hash_concat        c0 a1 in
                let c2 = let a2 = U  u0 in hash_concat        c1 a2 in
                let c3 = let a3 = BN n  in hash_concat        c2 a3 in
                let c4 = let a4 = U  u1 in hash_concat        c3 a4 in
                hash_concat_nonce_string_addr c4 nonce s b2
            | BUBUNU_RES b0 u0 b1 u1 n u2 nonce s b2 =>
                let c0 = let a0 = B  b0 in hash_concat zeroByStr a0 in
                let c1 = let a1 = U  u0 in hash_concat        c0 a1 in
                let c2 = let a2 = B  b1 in hash_concat        c1 a2 in
                let c3 = let a3 = U  u1 in hash_concat        c2 a3 in
                let c4 = let a4 = BN n  in hash_concat        c3 a4 in
                let c5 = let a5 = U  u2 in hash_concat        c4 a5 in
                hash_concat_nonce_string_addr c5 nonce s b2
            | LB33U32_RES l u nonce s b =>
                let l_bystr = hash_bystr33_list l in
                let prefix_bystr = let a1 = U32 u in hash_concat l_bystr a1 in
                hash_concat_nonce_string_addr prefix_bystr nonce s b
            | LBLB_RES l0 l1 nonce s b =>
                let l0_bystr = hash_bystr20_list l0 in
                let l1_bystr = hash_bystr20_list l1 in
                let prefix_bystr = builtin concat l0_bystr l1_bystr in
                hash_concat_nonce_string_addr prefix_bystr nonce s b
            | BLBLB_RES b0 l0 l1 nonce s b1 =>
                let c0 = let a0 = B b0 in hash_concat zeroByStr a0 in
                let l0_bystr = hash_bystr20_list l0 in
                let l1_bystr = hash_bystr20_list l1 in
                let lists_bystr = builtin concat l0_bystr l1_bystr in
                let prefix_bystr = builtin concat c0 lists_bystr in
                hash_concat_nonce_string_addr prefix_bystr nonce s b1
            end



contract IgniteWallet(
    init_admin_pubkey: ByStr33,
    init_config: ByStr20 with contract field config_bystr20: Map String ByStr20, field config_uint128: Map String Uint128, field config_bystr33: Map String ByStr33, field reputation: ByStr20 with contract field address_to_discount: Map ByStr20 Uint128 end end
)



field bystr20_read: ByStr20 = zeroByStr20
field bystr33_read: ByStr33 = zeroByStr33
field uint128_read: Uint128 = zero



field admin: ByStr20 = builtin schnorr_get_address init_admin_pubkey
field admin_pubkey: ByStr33 = init_admin_pubkey




field recoverers: SocialRecoverySet = NotSetup

field is_locked: Bool = False

field temp_nominated_admin: ByStr20 = zeroByStr20





field ignite_withdraw_streak: Uint128 = zero

field void_cheques: Map ByStr32 Bool = Emp ByStr32 Bool




field temp_discount: Uint128 = zero

field temp_was_service_account: Bool = false
field temp_swap_zil_to_token_params: TmpSwapZilToTokenParams = NoSwapZilToTokenParams

field temp_new_target_wallet_address: ByStr20 = zeroByStr20

procedure ThrowError(err: Error)
    e = make_error err;
    throw e
end


procedure WalletIsNotLocked()
    is_locked_tmp <- is_locked;
    match is_locked_tmp with
    | True => e = WalletLocked; ThrowError e
    | False => 
    end
end





procedure ReadByStr20Config(key: String)
    option_service <-& init_config.config_bystr20[key];
    service = option_bystr20_value option_service;
    bystr20_read := service
end

procedure ReadByStr33Config(key: String)
    option_service <-& init_config.config_bystr33[key];
    service = option_bystr33_value option_service;
    bystr33_read := service
end

procedure ReadUint128Config(key: String)
    option_val <-& init_config.config_uint128[key];
    val = option_uint128_value option_val;
    uint128_read := val
end

procedure UpdateDiscount()
    rep <-& init_config.reputation;
    option_discount <-& rep.address_to_discount[_this_address];
    discount = option_uint128_value option_discount;
    temp_discount := discount
end
procedure AssertIsAdmin(addr: ByStr20)
    admin_temp <- admin;
    is_admin = builtin eq admin_temp addr;
    match is_admin with
    | True =>
    | False => e = NotAuthorized; ThrowError e
    end
end

procedure IsAdmin()
    AssertIsAdmin _sender
end




procedure DoVoidCheque(cheque_hash: ByStr)
    hash = builtin sha256hash cheque_hash;
    void_cheques[hash] := true
end
procedure AssertChequeHashValid(cheque_hash: ByStr)
    hash = builtin sha256hash cheque_hash;
    cheque_invalid <- exists void_cheques[hash];
    match cheque_invalid with 
        | False =>
        | True => e = InvalidCheque; ThrowError e
    end
end

procedure SendZIL(beneficiary: ByStr20, amt: Uint128)
    msg = let m = { 
        _tag: "AddFunds";
        _recipient: beneficiary;
        _amount: amt
    } in one_msg m;
    send msg
end

procedure TransferMsg(impl: ByStr20, beneficiary: ByStr20, amt: Uint128)
    msg = let m = {
        _tag: "Transfer";
        _recipient: impl;
        _amount: zero;
        to: beneficiary;
        amount: amt 
    } in one_msg m;
    send msg
end

procedure PayZILFee(amt: Uint128)
    ReadByStr20Config fee_collector; collector <- bystr20_read;
    SendZIL collector amt
end

procedure PayTokenFee(token_address: ByStr20, amt: Uint128)
    ReadByStr20Config fee_collector; collector <- bystr20_read;
    TransferMsg token_address collector amt
end

procedure IncreaseAllowance(impl: ByStr20, spender: ByStr20, amt: Uint128)
    msg = let m = {
        _tag: "IncreaseAllowance";
        _recipient: impl;
        _amount: zero;
        spender: spender;
        amount: amt
    } in one_msg m;
    send msg
end

procedure PaybackForGas(tag: String)
    ReadUint128Config tag; gas_back <- uint128_read;
    is_zero = builtin eq zero gas_back;
    match is_zero with
    | True =>
    | False => 
        
        is_smaller = builtin lt gas_back zil_100;
        match is_smaller with
        | True => SendZIL _sender gas_back
        | False => 
            e = GasFeeAnomaly; ThrowError e
        end
    end
end

transition VoidCheque(hash: ByStr)
    g = "VoidCheque";
    IsAdmin; WalletIsNotLocked; PaybackForGas g;
    DoVoidCheque hash
end
procedure AssertChequeValidityAndVoidIt(cheque_hash: ByStr, pubkey: ByStr33, signature: ByStr64)
    AssertChequeHashValid cheque_hash;
    valid_sig = builtin schnorr_verify pubkey cheque_hash signature;
    match valid_sig with
        | True =>
            
            DoVoidCheque cheque_hash
        | False => e = InvalidSignature; ThrowError e
    end
end

procedure AssertIsAdminSignatureAndVoidIt(signable: SignableArgs, signature: ByStr64)
    cheque_hash = signable_to_cheque_hash signable;
    admin_pub_temp <- admin_pubkey;
    AssertChequeValidityAndVoidIt cheque_hash admin_pub_temp signature
end

procedure AssertIsAdminOrServiceAccountSignatureAndVoidAndSetWasServiceAccount(signable: SignableArgs, signature: ByStr64)
    cheque_hash = signable_to_cheque_hash signable;
    AssertChequeHashValid cheque_hash;
    admin_pub_temp <- admin_pubkey;
    ReadByStr33Config ignite_service_account_pubkey; service_account_pubkey <- bystr33_read;
    valid_admin_sig = builtin schnorr_verify admin_pub_temp cheque_hash signature;
    valid_service_sig = builtin schnorr_verify service_account_pubkey cheque_hash signature;
    valid = orb valid_admin_sig valid_service_sig;
    match valid with
        | True =>
            
            DoVoidCheque cheque_hash;
            temp_was_service_account := valid_service_sig
        | False => e = InvalidSignature; ThrowError e
    end
end


transition SendFunds(beneficiary: ByStr20, amt: Uint128, nonce: Uint128, signature: ByStr64)
    g = "SendFunds";
    signable = BU_RES beneficiary amt nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    SendZIL beneficiary amt
end

transition Transfer(impl: ByStr20, beneficiary: ByStr20, amt: Uint128, nonce: Uint128, signature: ByStr64)
    g = "Transfer";
    signable = BBU_RES impl beneficiary amt nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    TransferMsg impl beneficiary amt
end





procedure SsnProxyAddrMsg(tag: String, ssnaddr: ByStr20, amt: Uint128)
    ReadByStr20Config ssn_proxy; proxy <- bystr20_read; 
    msg = let m = { 
        _tag: tag;
        _recipient: proxy;
        _amount: amt;
        ssnaddr: ssnaddr
    } in one_msg m;
    send msg
end

procedure SsnProxyPlainMsg(tag: String)
    ReadByStr20Config ssn_proxy; proxy <- bystr20_read; 
    msg = let m = { 
        _tag: tag;
        _recipient: proxy;
        _amount: zero
    } in one_msg m;
    send msg
end

procedure SsnProxyRequestorMsg(tag: String, requestor: ByStr20)
    ReadByStr20Config ssn_proxy; proxy <- bystr20_read; 
    msg = let m = { 
        _tag: tag;
        _recipient: proxy;
        _amount: zero;
        requestor: requestor
    } in one_msg m;
    send msg
end
procedure DoWithdrawStakeRewards(ssnaddr: ByStr20)
    tag = "WithdrawStakeRewards";
    SsnProxyAddrMsg tag ssnaddr zero
end
procedure UnsetTmpSwapZilToTokenParams()
    no_val = NoSwapZilToTokenParams;
    temp_swap_zil_to_token_params := no_val
end
procedure SetTmpSwapZilToTokenParams(token_address: ByStr20, min_token_amount: Uint128, deadline_block: BNum, commission: Uint128)
    is_null = builtin eq token_address zeroByStr20;
    match is_null with
    | True => UnsetTmpSwapZilToTokenParams
    | False =>
        is_val = TmpSwapZilToTokenParams token_address min_token_amount deadline_block commission;
        temp_swap_zil_to_token_params := is_val
    end
end

transition WithdrawStakeRewards(ssnaddr: ByStr20, token_address: ByStr20, min_token_amount: Uint128, deadline_block: BNum, commission: Uint128, nonce: Uint128, signature: ByStr64)
    tag = "WithdrawStakeRewards";
    signable = BBUNU_RES ssnaddr token_address min_token_amount deadline_block commission nonce tag _this_address;
    AssertIsAdminOrServiceAccountSignatureAndVoidAndSetWasServiceAccount signable signature; WalletIsNotLocked; PaybackForGas tag;
    SetTmpSwapZilToTokenParams token_address min_token_amount deadline_block commission;
    DoWithdrawStakeRewards ssnaddr
end

transition DelegateStake(ssnaddr: ByStr20, amt: Uint128, nonce: Uint128, signature: ByStr64)
    tag = "DelegateStake";
    signable = BU_RES ssnaddr amt nonce tag _this_address;
    AssertIsAdminOrServiceAccountSignatureAndVoidAndSetWasServiceAccount signable signature; WalletIsNotLocked; PaybackForGas tag;
    is_service_account <- temp_was_service_account;
    match is_service_account with
        | True =>
            fee_tag = "DelegateStake_fee";
            
            ReadUint128Config fee_tag; percentage_fee <- uint128_read;
            is_zero = builtin eq zero percentage_fee;
            not_zero = negb is_zero;
            match not_zero with
                | True =>
                    ReadByStr20Config fee_collector; collector <- bystr20_read;
                    UpdateDiscount; discount <- temp_discount;
                    fee_itself_discounted = sub_percentage_of_amt percentage_fee discount;
                    match fee_itself_discounted with
                    | Uint128Pair smaller_fee_percentage dis =>
                        amt_to_send_and_fee = sub_percentage_of_amt amt smaller_fee_percentage;
                        match amt_to_send_and_fee with
                        | Uint128Pair to_send fee_to_pay =>
                            SendZIL collector fee_to_pay;
                            SsnProxyAddrMsg tag ssnaddr to_send
                        end
                    end
                | False => SsnProxyAddrMsg tag ssnaddr amt
            end
        | False => SsnProxyAddrMsg tag ssnaddr amt
    end
end

transition WithdrawStakeAmt(ssnaddr: ByStr20, amt: Uint128, nonce: Uint128, signature: ByStr64)
    tag = "WithdrawStakeAmt";
    signable = BU_RES ssnaddr amt nonce tag _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas tag;
    ReadByStr20Config ssn_proxy; proxy <- bystr20_read; 
    msg = let m = { 
        _tag: tag;
        _recipient: proxy;
        _amount: zero;
        ssnaddr: ssnaddr;
        amt: amt
    } in one_msg m;
    send msg
end

transition CompleteWithdrawal(nonce: Uint128, signature: ByStr64)
    tag = "CompleteWithdrawal";
    signable = RES nonce tag _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas tag;
    SsnProxyPlainMsg tag
end

transition ReDelegateStake(ssnaddr: ByStr20, to_ssn: ByStr20, amount: Uint128, nonce: Uint128, signature: ByStr64)
    tag = "ReDelegateStake";
    signable = BBU_RES ssnaddr to_ssn amount nonce tag _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas tag;
    ReadByStr20Config ssn_proxy; proxy <- bystr20_read; 
    msg = let m = {
        _tag: tag;
        _recipient: proxy;
        _amount: zero;
        ssnaddr: ssnaddr;
        to_ssn: to_ssn;
        amount: amount
    } in one_msg m;
    send msg
end
procedure DoRequestDelegatorSwap(new_deleg_addr: ByStr20)
    tag = "RequestDelegatorSwap";
    ReadByStr20Config ssn_proxy; proxy <- bystr20_read; 
    msg = let m = {
        _tag: tag;
        _recipient: proxy;
        _amount: zero;
        new_deleg_addr: new_deleg_addr
    } in one_msg m;
    send msg
end

transition RequestDelegatorSwap(new_deleg_addr: ByStr20, nonce: Uint128, signature: ByStr64)
    tag = "RequestDelegatorSwap";
    signable = B_RES new_deleg_addr nonce tag _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas tag;
    DoRequestDelegatorSwap new_deleg_addr
end

transition RevokeDelegatorSwap(nonce: Uint128, signature: ByStr64)
    tag = "RevokeDelegatorSwap";
    signable = RES nonce tag _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas tag;
    SsnProxyPlainMsg tag
end

transition ConfirmDelegatorSwap(requestor: ByStr20, nonce: Uint128, signature: ByStr64)
    tag = "ConfirmDelegatorSwap";
    signable = B_RES requestor nonce tag _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas tag;
    SsnProxyRequestorMsg tag requestor
end

transition RejectDelegatorSwap(requestor: ByStr20, nonce: Uint128, signature: ByStr64)
    tag = "RejectDelegatorSwap"; 
    signable = B_RES requestor nonce tag _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas tag;
    SsnProxyRequestorMsg tag requestor
end





procedure DoSwapExactTokensForZIL(token_address: ByStr20, token_amount: Uint128, min_zil_amount: Uint128, deadline_block: BNum, commission: Uint128)
    UpdateDiscount; discount <- temp_discount;
    params = zilswap_params_sub_commission_with_discount token_amount min_zil_amount commission discount;
    match params with
    | Quadruplet token_amt token_comm zil_amt zil_comm =>
        
        PayTokenFee token_address token_comm;
        
        ReadByStr20Config zilswap; swap_addr <- bystr20_read;
        IncreaseAllowance token_address swap_addr token_amount;
        msg = let m = {
            _tag: "SwapExactTokensForZIL"; 
            _recipient: swap_addr;
            _amount: zero;
            token_address: token_address;
            token_amount: token_amt;
            min_zil_amount: zil_amt;
            deadline_block: deadline_block;
            recipient_address: _this_address
        } in one_msg m;
        send msg
    end
end

procedure DoSwapExactZILForTokens(token_address: ByStr20, zil_amount: Uint128, min_token_amount: Uint128, deadline_block: BNum, commission: Uint128)
    UpdateDiscount; discount <- temp_discount;
    params = zilswap_params_sub_commission_with_discount zil_amount min_token_amount commission discount;
    match params with
    | Quadruplet zil_amt zil_comm token_amt token_comm =>
        
        PayZILFee zil_comm;
        
        ReadByStr20Config zilswap; swap_addr <- bystr20_read;
        msg = let m = {
            _tag: "SwapExactZILForTokens"; 
            _recipient: swap_addr; 
            _amount: zil_amt; 
            token_address: token_address;
            min_token_amount: token_amt;
            deadline_block: deadline_block;
            recipient_address: _this_address
        } in one_msg m;
        send msg
    end
end

procedure DoSwapExactTokensForTokens(token0_address: ByStr20, token0_amount: Uint128, token1_address: ByStr20, min_token1_amount: Uint128, deadline_block: BNum, commission: Uint128)
    UpdateDiscount; discount <- temp_discount;
    params = zilswap_params_sub_commission_with_discount token0_amount min_token1_amount commission discount;
    match params with
    | Quadruplet token0_amt token0_comm token1_amt token1_comm =>
        
        PayTokenFee token0_address token0_comm;
        
        ReadByStr20Config zilswap; swap_addr <- bystr20_read;
        IncreaseAllowance token0_address swap_addr token0_amount;
        msg = let m = {
            _tag: "SwapExactTokensForTokens"; 
            _recipient: swap_addr; 
            _amount: zero; 
            token0_address: token0_address;
            token0_amount: token0_amt;
            token1_address: token1_address;
            min_token1_amount: token1_amt;
            deadline_block: deadline_block;
            recipient_address: _this_address
        } in one_msg m;
        send msg
    end
end





transition SwapExactZILForTokens(token_address: ByStr20, zil_amount: Uint128, min_token_amount: Uint128, deadline_block: BNum, commission: Uint128, nonce: Uint128, signature: ByStr64)
    g = "SwapExactZILForTokens";
    signable = BUUNU_RES token_address zil_amount min_token_amount deadline_block commission nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    DoSwapExactZILForTokens token_address zil_amount min_token_amount deadline_block commission
end
transition SwapExactTokensForZIL(token_address: ByStr20, token_amount: Uint128, min_zil_amount: Uint128, deadline_block: BNum, commission: Uint128, nonce: Uint128, signature: ByStr64)
    g = "SwapExactTokensForZIL";
    signable = BUUNU_RES token_address token_amount min_zil_amount deadline_block commission nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    DoSwapExactTokensForZIL token_address token_amount min_zil_amount deadline_block commission
end
transition SwapExactTokensForTokens(token0_address: ByStr20, token0_amount: Uint128, token1_address: ByStr20, min_token1_amount: Uint128, deadline_block: BNum, commission: Uint128, nonce: Uint128, signature: ByStr64)
    g = "SwapExactTokensForTokens";
    signable = BUBUNU_RES token0_address token0_amount token1_address min_token1_amount deadline_block commission nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    DoSwapExactTokensForTokens token0_address token0_amount token1_address min_token1_amount deadline_block commission
end





procedure AssertRecoverySetupIsValid(pubkeys: List ByStr33, needed_signatures: Uint32)
    len = bystr33_list_len pubkeys;
    sig_lt_pub_len = builtin lt needed_signatures len;
    pub_len_is_zero = builtin eq uint32_zero len;
    sig_is_zero = builtin eq uint32_zero needed_signatures;
    e = InvalidSRSetup;
    match sig_lt_pub_len with
    | True =>
        match pub_len_is_zero with
        | False =>
            match sig_is_zero with
            | False =>
                are_unique = pubkeys_are_unique pubkeys;
                match are_unique with
                | True => 
                
                | False => er = PubkeysAreNotUnique; ThrowError er
                end
            | True => ThrowError e
            end
        | True => ThrowError e
        end
    | False => ThrowError e
    end
end

procedure AssertRecoveryMessageValidityAndVoidIt(msg: RecovererSignedMsg)
    new_admin <- temp_nominated_admin;
    cur_blk <- & BLOCKNUMBER;
    match msg with
    | RecovererSignedMsg pubkey valid_until sig =>
        sr <- recoverers;
        match sr with
        | Setup keys sigs_required =>
            
            is_from_recoverer = bystr33_has_elem keys pubkey; 
            not_expired = builtin blt cur_blk valid_until;
            is_valid = andb is_from_recoverer not_expired;
            match is_valid with
            | True =>
                
                new_admin_hash = builtin sha256hash new_admin;
                valid_until_hash = builtin sha256hash valid_until;
                this_addr_hash = builtin sha256hash _this_address;
                
                p0_hash = builtin concat new_admin_hash valid_until_hash;
                p1_hash = builtin concat p0_hash this_addr_hash;
                cheque_hash = builtin to_bystr p1_hash;
                AssertChequeValidityAndVoidIt cheque_hash pubkey sig
            | False => e = RecoveryMsgPreconditionNotMet; ThrowError e
            end
        | NotSetup => e = SRNotSetup; ThrowError e 
        end
    end
end

procedure AssertRecoveryMessageFormatIsValid(msgs: List RecovererSignedMsg, sigs_required: Uint32)
    len = recoverer_msg_list_len msgs;
    is_same = builtin eq len sigs_required;
    match is_same with
    | True => 
    | False => e = WrongRecoveryListLength; ThrowError e
    end;
    are_unique = recoverer_msg_list_has_unique_pubkeys msgs;
    match are_unique with
    | True => 
    | False => e = PubkeysAreNotUnique; ThrowError e
    end
end
procedure SetNewAdminFromPubkey(new_admin: ByStr33)
    admin_pubkey := new_admin;
    new_addr = builtin schnorr_get_address new_admin;
    admin := new_addr
end
procedure DoWalletUnlock()
    is_locked := false
end



transition RecoverWallet(msgs: List RecovererSignedMsg, nominated_admin: ByStr33)
    g = "RecoverWallet";
    PaybackForGas g;
    
    sr <- recoverers;
    match sr with
    | Setup keys sigs_required =>
        AssertRecoveryMessageFormatIsValid msgs sigs_required;
        nominated_addr = builtin schnorr_get_address nominated_admin;
        temp_nominated_admin := nominated_addr;
        forall msgs AssertRecoveryMessageValidityAndVoidIt;
        SetNewAdminFromPubkey nominated_admin;
        DoWalletUnlock
    | NotSetup => e = SRNotSetup; ThrowError e 
    end
end
procedure DoLock()
    sr <- recoverers;
    match sr with
    | Setup keys sigs_required => is_locked := true
    | NotSetup => e = SRNotSetup; ThrowError e 
    end
end

transition LockWallet()
    g = "LockWallet";
    IsAdmin; WalletIsNotLocked; PaybackForGas g;
    DoLock
end
transition MetaLockWallet(nonce: Uint128, signature: ByStr64)
    g = "MetaLockWallet";
    signable = RES nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    DoLock
end

transition SetupRecovery(pubkeys: List ByStr33, needed_signatures: Uint32, nonce: Uint128, signature: ByStr64)
    g = "SetupRecovery";
    signable = LB33U32_RES pubkeys needed_signatures nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    AssertRecoverySetupIsValid pubkeys needed_signatures;
    recoverers_tmp = Setup pubkeys needed_signatures;
    recoverers := recoverers_tmp
end




transition SellStakeToCookieJar(seller_ssn_addressses: List ByStr20, cookie_ssn_addressses: List ByStr20, nonce: Uint128, signature: ByStr64)
    g = "SellStakeToCookieJar";
    signable = LBLB_RES seller_ssn_addressses cookie_ssn_addressses nonce g _this_address;
    AssertIsAdminSignatureAndVoidIt signable signature; WalletIsNotLocked; PaybackForGas g;
    ReadByStr20Config ssn_proxy; proxy <- bystr20_read; 
    ReadByStr20Config cookie_jar; cookie <- bystr20_read;
    forall seller_ssn_addressses DoWithdrawStakeRewards;
    DoRequestDelegatorSwap cookie;
    msg = let m = {
        _tag: "SellStakeToCookieJar"; 
        _recipient: cookie;
        _amount: zero;
        seller_ssn_addressses: seller_ssn_addressses;
        cookie_ssn_addressses: cookie_ssn_addressses
    } in one_msg m;
    send msg
end

procedure MoveTokenToNewWallet(token_address: ByStr20 with contract field balances: Map ByStr20 Uint128 end)
    target <- temp_new_target_wallet_address;
    option_amt <-& token_address.balances[_this_address];
    amt = option_uint128_value option_amt;
    TransferMsg token_address target amt
end


procedure ThrowIfIgniteSignatureIsInvalid(signable: SignableArgs, signature: ByStr64)
    ReadByStr33Config ignite_service_account_pubkey; service_account_pubkey <- bystr33_read;
    is_null = builtin eq service_account_pubkey zeroByStr33;
    match is_null with
    
    | True => e = PubkeyIsNull; ThrowError e
    | False => 
        cheque_hash = signable_to_cheque_hash signable;
        valid_sig = builtin schnorr_verify service_account_pubkey cheque_hash signature;
        match valid_sig with
            | True =>
            | False => e = InvalidSignature; ThrowError e
        end
    end
end

transition UpgradeWallet(new_address: ByStr20 with contract field admin: ByStr20 end, ssn_addresses: List ByStr20, token_addresses: List (ByStr20 with contract field balances: Map ByStr20 Uint128 end), nonce: Uint128, admin_signature: ByStr64, ignite_signature: ByStr64)
    g = "UpgradeWallet";
    signable = BLBLB_RES new_address ssn_addresses token_addresses nonce g _this_address;
    WalletIsNotLocked;
    AssertIsAdminSignatureAndVoidIt signable admin_signature;
    ThrowIfIgniteSignatureIsInvalid signable ignite_signature;
    PaybackForGas g;
    temp_new_target_wallet_address := new_address;
    
    other_admin <-& new_address.admin;
    AssertIsAdmin other_admin;
    
    rep <-& init_config.reputation;
    msg = let m = {
        _tag: "MoveToNewAddress";
        _recipient: rep;
        _amount: zero;
        new_address: new_address
    } in one_msg m;
    send msg;
    
    current_balance <- _balance;
    SendZIL new_address current_balance;
    ssn_len = bystr20_list_len ssn_addresses;
    no_stake = builtin eq ssn_len uint32_zero;
    match no_stake with
    | True =>
    | False => 
        
        forall ssn_addresses DoWithdrawStakeRewards;
        
        DoRequestDelegatorSwap new_address
    end;
    
    forall token_addresses MoveTokenToNewWallet
end




procedure ZeroIgniteWithdrawStreak()
    ignite_withdraw_streak := zero
end
procedure IncrementIgniteWithdrawStreak()
    s <- ignite_withdraw_streak;
    added = builtin add s one;
    ignite_withdraw_streak := added
end

procedure TryDoTheAutoSwap(zil_amount: Uint128)
    tmp_swap_params <- temp_swap_zil_to_token_params;
    match tmp_swap_params with
    | NoSwapZilToTokenParams => 
    | TmpSwapZilToTokenParams token_address min_token_amount deadline_block commission =>
        DoSwapExactZILForTokens token_address zil_amount min_token_amount deadline_block commission;
        UnsetTmpSwapZilToTokenParams
    end
end




transition WithdrawStakeRewardsSuccessCallBack(ssnaddr: ByStr20, rewards: Uint128)
    fee_tag = "WithdrawStakeRewardsSuccessCallBack_fee";
    
    ReadByStr20Config ssnlist_implementation; ssnlist <- bystr20_read;
    is_ssnlist = builtin eq ssnlist _sender;
    
    match is_ssnlist with
    | True => 
        was_service_account <- temp_was_service_account;
        ReadByStr20Config ignite_ssn; ignite_snn_addr <- bystr20_read;
        is_ignite_ssn = builtin eq ssnaddr ignite_snn_addr;
        match is_ignite_ssn with
        | True => 
            IncrementIgniteWithdrawStreak;
            
            rep <-& init_config.reputation;
            streak <- ignite_withdraw_streak;
            msg = let m = {
                _tag: "MintMeReputation";
                _recipient: rep;
                _amount: zero;
                rewards: rewards;
                streak: streak
            } in one_msg m;
            send msg;
            TryDoTheAutoSwap rewards
        | False => 
            ZeroIgniteWithdrawStreak;
            ReadUint128Config fee_tag; percentage_fee <- uint128_read;
            is_zero = builtin eq zero percentage_fee;
            not_zero = negb is_zero;
            was_service_account_fee_not_zero = andb was_service_account not_zero;
            match was_service_account_fee_not_zero with
            | True =>
                UpdateDiscount; discount <- temp_discount;
                smaller_comm_and_discounted_amt = sub_percentage_of_amt percentage_fee discount;
                match smaller_comm_and_discounted_amt with
                | Uint128Pair smaller_comm discounted_amt => 
                    
                    rewards_and_fee = sub_percentage_of_amt rewards smaller_comm;
                    match rewards_and_fee with
                    | Uint128Pair rewards_to_keep fee_to_pay =>
                        PayZILFee fee_to_pay;
                        TryDoTheAutoSwap rewards_to_keep
                    end
                end
            | False => TryDoTheAutoSwap rewards
            end
        end
    | False => 
    end
end

transition DelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128) end
transition WithdrawStakeAmtSuccessCallBack(ssnaddr: ByStr20, amount: Uint128) end
transition CompleteWithdrawalNoUnbondedStakeCallBack(amount: Uint128) end
transition CompleteWithdrawalSuccessCallBack(amount: Uint128) end
transition ReDelegateStakeSuccessCallBack(ssnaddr: ByStr20, tossn: ByStr20, amount: Uint128) end

transition RecipientAcceptMint(minter: ByStr20, recipient: ByStr20, amount: Uint128) end
transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128) end
transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128) end
transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount : Uint128) end
transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128) end

transition AddFunds() accept end