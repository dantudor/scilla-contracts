scilla_version 0

(* Proxy contract to be used by Xfers *)

import BoolUtils IntUtils

library ProxyContract

let zero = Uint128 0

(* returns singleton List Message *)
let one_msg =
    fun (msg : Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract ProxyContract
(
init_implementation : ByStr20,
init_admin : ByStr20
)

field implementation : ByStr20 = init_implementation
field admin : ByStr20 = init_admin
field balances : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field totalSupply : Uint128 = zero

transition upgradeTo(newImplementation : ByStr20)
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      implementation := newImplementation;
      e = {_eventname : "Upgraded"; implementation_address : newImplementation};
      event e
    | False =>
      e = {_eventname : "upgradeTo FailedNotAdmin"; newImplementation : newImplementation};
      event e
    end
end

transition changeAdmin(newAdmin : ByStr20)
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      admin := newAdmin;
      e = {_eventname : "AdminChanged"; oldAdmin : currentAdmin; newAdmin : newAdmin};
      event e
    | False =>
      e = {_eventname : "changeAdmin FailedNotAdmin"; newAdmin : newAdmin};
      event e
    end
end

transition proxyTransferOwnership(newOwner : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "transferOwnership"; _recipient : current_impl; _amount : zero;
           newOwner : newOwner; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyPause()
    current_impl <- implementation;
    msg = {_tag : "pause"; _recipient : current_impl; _amount : zero; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyUnPause()
    current_impl <- implementation;
    msg = {_tag : "unpause"; _recipient : current_impl; _amount : zero; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyUpdatePauser(newPauser : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "updatePauser"; _recipient : current_impl; _amount : zero;
           newPauser : newPauser; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyBlacklist(address : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "blacklist"; _recipient : current_impl; _amount : zero;
           address : address; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyUnBlacklist(address : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "unBlacklist"; _recipient : current_impl; _amount : zero;
           address : address; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyUpdateBlacklister(newBlacklister : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "updateBlacklister"; _recipient : current_impl; _amount : zero;
           newBlacklister : newBlacklister; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyMint(to: ByStr20, value : Uint128)
    current_impl <- implementation;
    current_supply <- totalSupply;
    get_to_bal <- balances[to];
    to_bal =
        match get_to_bal with
        | Some bal => bal
        | None => zero
        end;
    msg = {_tag : "mint"; _recipient : current_impl; _amount : zero; to : to;
           value : value; initiator : _sender; to_bal : to_bal; current_supply : current_supply};
    msgs = one_msg msg;
    send msgs
end

transition mintCallBack(to: ByStr20, new_to_bal: Uint128, new_supply : Uint128)
    current_impt <- implementation;
    is_current_imp = builtin eq current_impt _sender;
    match is_current_imp with
    | False =>
        throw
    | True =>
        balances[to] := new_to_bal;
        totalSupply := new_supply
    end
end

transition proxyIncreaseAllowance (spender : ByStr20, value : Uint128)
    current_impl <- implementation;
    msg = {_tag : "increaseAllowance"; _recipient : current_impl; _amount : zero;
           spender : spender; value : value; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyDecreaseAllowance (spender : ByStr20, value : Uint128)
    current_impl <- implementation;
    msg = {_tag : "decreaseAllowance"; _recipient : current_impl; _amount : zero;
           spender : spender; value : value; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyTransferFrom (from : ByStr20, to : ByStr20, value : Uint128)
    current_impl <- implementation;
    get_to_bal <- balances[to];
    to_bal =
        match get_to_bal with
        | Some bal => bal
        | None => zero
        end;
    get_from_bal <- balances[from];
    from_bal =
        match get_from_bal with
        | Some bal => bal
        | None => zero
        end;
    msg = {_tag : "transferFrom"; _recipient : current_impl; _amount : zero;
           from : from; to : to; value : value; initiator : _sender; to_bal : to_bal; from_bal : from_bal};
    msgs = one_msg msg;
    send msgs
end

transition transferFromCallBack(from : ByStr20, to : ByStr20, new_from_bal : Uint128, new_to_bal : Uint128)
    current_impt <- implementation;
    is_current_imp = builtin eq current_impt _sender;
    match is_current_imp with
    | False =>
        throw
    | True =>
        balances[to] := new_to_bal;
        balances[from] := new_from_bal
    end
end

transition proxyTransfer (to : ByStr20, value : Uint128)
    current_impl <- implementation;
    get_to_bal <- balances[to];
    to_bal =
        match get_to_bal with
        | Some bal => bal
        | None => zero
        end;
    get_init_bal <- balances[_sender];
    init_bal =
        match get_init_bal with
        | Some bal => bal
        | None => zero
        end;
    msg = {_tag : "transfer"; _recipient : current_impl; _amount : zero; to : to;
           value : value; initiator : _sender; to_bal : to_bal; init_bal : init_bal};
    msgs = one_msg msg;
    send msgs
end

transition transferCallBack(to : ByStr20, initiator : ByStr20, new_to_bal : Uint128, new_init_bal : Uint128)
    current_impt <- implementation;
    is_current_imp = builtin eq current_impt _sender;
    match is_current_imp with
    | False =>
        throw
    | True =>
        balances[to] := new_to_bal;
        balances[initiator] := new_init_bal
    end
end

transition proxyBurn(value : Uint128)
    current_impl <- implementation;
    current_supply <- totalSupply;
    get_burn_bal <- balances[_sender];
    burn_bal =
        match get_burn_bal with
        | Some bal => bal
        | None => zero
        end;
    msg = {_tag : "burn"; _recipient : current_impl; _amount : zero; value : value; initiator : _sender; initiator_balance : burn_bal; current_supply : current_supply};
    msgs = one_msg msg;
    send msgs
end

transition burnCallBack(initiator : ByStr20, new_burn_balance : Uint128, new_supply : Uint128)
    current_impt <- implementation;
    is_current_imp = builtin eq current_impt _sender;
    match is_current_imp with
    | False =>
        throw
    | True =>
        balances[initiator] := new_burn_balance;
        totalSupply := new_supply
    end
end

transition proxyLawEnforcementWipingBurn(address : ByStr20)
    current_impl <- implementation;
    current_supply <- totalSupply;
    get_addr_bal <- balances[address];
    addr_bal =
        match get_addr_bal with
        | Some bal => bal
        | None => zero
        end;
    msg = {_tag : "lawEnforcementWipingBurn"; _recipient : current_impl; _amount : zero; address : address; initiator : _sender; addr_bal : addr_bal; current_supply : current_supply};
    msgs = one_msg msg;
    send msgs
end

transition lawEnforcementWipingBurnCallBack(address : ByStr20, new_supply : Uint128)
    current_impt <- implementation;
    is_current_imp = builtin eq current_impt _sender;
    match is_current_imp with
    | False =>
        throw
    | True =>
        balances[address] := zero;
        totalSupply := new_supply
    end
end

transition proxyIncreaseMinterAllowance(minter : ByStr20, amount : Uint128)
    current_impl <- implementation;
    msg = {_tag : "increaseMinterAllowance"; _recipient : current_impl; _amount : zero; minter : minter;
           amount : amount; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyDecreaseMinterAllowance(minter : ByStr20, amount : Uint128)
    current_impl <- implementation;
    msg = {_tag : "decreaseMinterAllowance"; _recipient : current_impl; _amount : zero; minter : minter;
           amount : amount; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition proxyUpdateMasterMinter(newMasterMinter : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "updateMasterMinter"; _recipient : current_impl; _amount : zero; newMasterMinter : newMasterMinter;
           initiator : _sender};
    msgs = one_msg msg;
    send msgs
end
