scilla_version 0

import ListUtils IntUtils BoolUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library WalletLib

(* Event emitted when the contract is initialized *)
let mk_contract_initialized_event =
  { _eventname : "ContractInitialized" }

(* Event for communicating a new transaction id *)
let mk_transaction_added_event =
  fun (tc : Uint32) =>
    { _eventname : "TransactionCreated" ;
     transactionId : tc }

(* Event for communicating that a transaction was signed *)
let mk_signed_transaction_event =
  fun (tc : Uint32) =>
    { _eventname : "TransactionSigned"; transactionId : tc }

(* Event for communicating that a signature was revoked *)
let mk_signature_revoked_event =
  fun (tc : Uint32) =>
    { _eventname : "SignatureRevoked"; transactionId : tc }

type Error =
| NonOwnerCannotSign
| UnknownTransactionId
| InsufficientFunds
| NoSignatureListFound
| AlreadySigned
| NotAlreadySigned
| InvalidContract
| InvalidAmount
| NotEnoughSignatures
| SenderMayNotExecute
| NonOwnerCannotSubmit
| IncorrectSignatureCount

(* Error events *)
let make_error =
  fun (err : Error) =>
  let err_code =
    match err with
    | NonOwnerCannotSign        => Int32 -1
    | UnknownTransactionId      => Int32 -2
    | InsufficientFunds         => Int32 -3
    | NoSignatureListFound      => Int32 -4
    | AlreadySigned             => Int32 -5
    | NotAlreadySigned          => Int32 -6
    | InvalidContract           => Int32 -7
    | InvalidAmount             => Int32 -8
    | NotEnoughSignatures       => Int32 -9
    | SenderMayNotExecute       => Int32 -10
    | NonOwnerCannotSubmit      => Int32 -11
    | IncorrectSignatureCount   => Int32 -12
    end in
  { _exception : "Error" ; err_code : err_code }

let t = True
let f = False
let zero = Uint32 0
let one = Uint32 1
let transaction_inc = one

(* Types of Transactions *)
type TokenTransaction =
(* Version 2 ownership methods *)
| RequestOwnershipTransfer of ByStr20
| ProxyRequestOwnershipTransfer of ByStr20 ByStr20
| ProxyConfirmOwnershipTransfer of ByStr20

(* Proxy methods *)
| SetCreditAmount of Uint128
| UpgradeWalletOwner of ByStr20

(* Version 1 ownership methods, mainly for fungible *)
| ProxyTransferOwnership of ByStr20 ByStr20
| TransferOwnership of ByStr20

(* Fungible methods *)
| ProxyMint of ByStr20 Uint128
| ProxyBurn of ByStr20 Uint128
| IncreaseAllowance of ByStr20 Uint128

(* Type of (outstanding) transactions *)
type Transaction =
(* Transfer of native tokens *)
| NativeTransaction of ByStr20 Uint128 String
(* Custom token transactions *)
| CustomTokenTransaction of ByStr20 TokenTransaction


(* Make map of owners *)
let mk_owners_map =
  fun (owners : List ByStr20) =>
    let init = Emp ByStr20 Bool in
    let iter =
      fun (acc : Map ByStr20 Bool) =>
      fun (cur_owner : ByStr20) =>
        (* Add owner unconditionally. We check for duplicates later *)
        builtin put acc cur_owner t
        in
    let folder = @list_foldl ByStr20 (Map ByStr20 Bool) in
    folder iter init owners

(* Wrap single message into singleton list *)
let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Create native transaction message as singleton list *)
let native_transaction_msg_as_list =
  fun (recipient : ByStr20) =>
  fun (amount : Uint128) =>
  fun (tag : String) =>
    let msg = {_tag : tag; _recipient : recipient; _amount : amount } in
    one_msg msg

(* Create custom transaction message as singleton list *)
let custom_token_transaction_msg_as_list =
  fun (proxyTokenContract : ByStr20) =>
  fun (tokenTransaction : TokenTransaction) =>
    let msg =
      match tokenTransaction with
      | RequestOwnershipTransfer newOwner =>
        {_recipient : proxyTokenContract ;
         _tag : "RequestOwnershipTransfer" ;
         _amount : Uint128 0 ;
         newOwner : newOwner }  
      | ProxyRequestOwnershipTransfer impl newOwner =>
        {_recipient : proxyTokenContract ;
         _tag : "ProxyRequestOwnershipTransfer" ;
         _amount : Uint128 0 ;
         impl : impl ;
         newOwner : newOwner }  
      | ProxyConfirmOwnershipTransfer impl =>
        {_recipient : proxyTokenContract ;
         _tag : "ProxyConfirmOwnershipTransfer" ;
         _amount : Uint128 0 ;
         impl : impl }  
      | SetCreditAmount amount =>
        {_recipient : proxyTokenContract ;
         _tag : "SetCreditAmount" ;
         _amount : Uint128 0 ;
         amount : amount }              
      | UpgradeWalletOwner newOwner => 
        {_recipient : proxyTokenContract ;
         _tag : "UpgradeWalletOwner" ;
         _amount : Uint128 0 ;
         newOwner : newOwner }      
      | ProxyTransferOwnership impl newOwner =>
        {_recipient : proxyTokenContract ;
         _tag : "ProxyTransferOwnership" ;
         _amount : Uint128 0 ;
         impl : impl ;
         newOwner : newOwner }
      | TransferOwnership newOwner =>
        {_recipient : proxyTokenContract ;
         _tag : "TransferOwnership" ;
         _amount : Uint128 0 ;
         newOwner : newOwner }
      | ProxyMint recipient amount =>
        {_recipient : proxyTokenContract ;
         _tag : "ProxyMint" ;
         _amount : Uint128 0 ;
         recipient : recipient ;
         amount : amount }
      | ProxyBurn burn_account amount =>
        {_recipient : proxyTokenContract ;
         _tag : "ProxyBurn" ;
         _amount : Uint128 0 ;
         burn_account : burn_account ;
         amount : amount } 
      | IncreaseAllowance spender amount =>  
        {_recipient : proxyTokenContract ;
         _tag : "IncreaseAllowance" ;
         _amount : Uint128 0 ;
         spender : spender ;
         amount : amount }   
      end
    in
    one_msg msg

(***************************************************)
(*             The contract definition             *)
(*                                                 *)
(* This contract holds funds that can be paid out  *)
(* to arbitrary users, provided that enough people *)
(* in the collection of owners sign off on the     *)
(* payout.                                         *)
(*                                                 *)
(* The transaction must be added to the contract   *)
(* before signatures can be collected. Once enough *)
(* signatures are collected, the recipient can ask *)
(* for the transaction to be executed and the      *)
(* money paid out.                                 *)
(*                                                 *)
(* If an owner changes his mind about a            *)
(* transaction, the signature can be revoked until *)
(* the transaction is executed.                    *)
(*                                                 *)
(* This wallet does not allow adding or removing   *)
(* owners, or changing the number of required      *)
(* signatures. To do any of those things, perform  *)
(* the following steps:                            *)
(*                                                 *)
(* 1. Deploy a new wallet with owners and          *)
(*    required_signatures set to the new values.   *)
(*    MAKE SURE THAT THE NEW WALLET HAS BEEN       *)
(*    SUCCESFULLY DEPLOYED WITH THE CORRECT        *)
(*    PARAMETERS BEFORE CONTINUING!                *)
(* 2. Invoke the SubmitTransaction transition on   *)
(*    the old wallet with the following            *)
(*    parameters:                                  *)
(*    recipient : The address of the new wallet    *)
(*    amount : The _balance of the old wallet      *)
(*    tag : "AddFunds"                             *)
(* 3. Have (a sufficient number of) the owners of  *)
(*    the old contract invoke the SignTransaction  *)
(*    transition on the old wallet. The parameter  *)
(*    transactionId should be set to the Id of the *)
(*    transaction created in step 2.               *)
(* 4. Have one of the owners of the old contract   *)
(*    invoke the ExecuteTransaction transition on  *)
(*    the old contract. This will cause the entire *)
(*    balance of the old contract to be            *)
(*    transferred to the new wallet. Note that no  *)
(*    un-executed transactions will be transferred *)
(*    to the new wallet along with the funds.      *)
(*                                                 *)
(* WARNING: If a sufficient number of owners lose  *)
(* their private keys, or for any other reason are *)
(* unable or unwilling to sign for new             *)
(* transactions, the funds in the wallet will be   *)
(* locked forever. It is therefore a good idea to  *)
(* set required_signatures to a value strictly     *)
(* less than the number of owners, so that the     *)
(* remaining owners can retrieve the funds should  *)
(* such a scenario occur.                          *)
(*                                                 *)
(* If an owner loses his private key, the          *)
(* remaining owners should move the funds to a new *)
(* wallet (using the workflow described above) to  *)
(* ensure that funds are not locked if another     *)
(* owner loses his private key. The owner who      *)
(* originally lost his private key can generate a  *)
(* new key, and the corresponding address be added *)
(* to the new wallet, so that the same set of      *)
(* persons own the new wallet.                     *)
(*                                                 *)
(***************************************************)
contract Wallet
(
owners_list         : List ByStr20,
required_signatures : Uint32
)
with
  let len = @list_length ByStr20 in
  let no_of_owners = len owners_list in
  let owners_ok = builtin lt zero no_of_owners in
  let required_sigs_not_too_low = builtin lt zero required_signatures in
  let required_sigs_too_high = builtin lt no_of_owners required_signatures in
  let required_sigs_not_too_high = negb required_sigs_too_high in
  let required_sigs_ok = andb required_sigs_not_too_high required_sigs_not_too_low in
  let all_ok = andb required_sigs_ok owners_ok in
  (* Building the owners map is expensive, so avoid checking the owners map until *)
  (* everything else has been checked *)
  match all_ok with
  | True =>
    let owners_map = mk_owners_map owners_list in
    let size_of_owners_map = builtin size owners_map in
    builtin eq size_of_owners_map no_of_owners
  | False =>
    False
  end
=>

(* adr -> True indicates an owner *)
(* adr not in map indicates non-owner *)
(* adr -> False is not used *)
field owners           : Map ByStr20 Bool = mk_owners_map owners_list

field transactionCount : Uint32 = Uint32 0

(* Collected signatures for transactions *)
field signatures       : Map Uint32 (Map ByStr20 Bool) =
  Emp Uint32 (Map ByStr20 Bool)

(* Running count of collected signatures for transactions *)
field signature_counts : Map Uint32 Uint32 =
  Emp Uint32 Uint32

(* Transactions *)
field transactions     : Map Uint32 Transaction =
                           Emp Uint32 Transaction

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

(* Add signature to signature list *)
procedure AddSignature (transactionId : Uint32, signee : ByStr20)
  sig <- exists signatures[transactionId][signee];
  match sig with
  | False =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      (* 0 signatures *)
      signature_counts[transactionId] := one
    | Some c =>
      new_c = builtin add c one;
      signature_counts[transactionId] := new_c
    end;
    signatures[transactionId][signee] := t;
    e = mk_signed_transaction_event transactionId;
    event e
  | True =>
    (* Already signed *)
    err = AlreadySigned;
    ThrowError err
  end
end

(* Common procedure for all new transactions. *)
(* Check that the sender is owner. Store and sign the transaction. *)
procedure SubmitTransaction (transaction : Transaction)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSubmit;
    ThrowError err
  | True =>
    tc <- transactionCount;
    transactions[tc] := transaction;
    (* Sender implicitly signs *)
    AddSignature tc _sender;
    (* Increment transaction counter *)
    tc_new = builtin add tc transaction_inc;
    (* Update transaction count *)
    transactionCount := tc_new;
    (* Create event with transaction Id *)
    e = mk_transaction_added_event tc;
    event e
  end
end

(* Submit a transaction of native tokens for future signoff *)
transition SubmitNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  zero = Uint128 0;
  amount_is_zero = builtin eq amount zero;
  match amount_is_zero with
  | True =>
    (* Illegal transaction *)
    err = InvalidAmount;
    ThrowError err
  | False =>
    transaction = NativeTransaction recipient amount tag;
    SubmitTransaction transaction
  end
end

(* Common submit procedure for custom token transactions *)
procedure SubmitCustomTransaction (proxyTokenContract : ByStr20, tokenTransaction : TokenTransaction)
  transaction = CustomTokenTransaction proxyTokenContract tokenTransaction;
  SubmitTransaction transaction
end

(* Submit a new RequestOwnershipTransfer transaction for future signoff *)
transition SubmitCustomRequestOwnershipTransferTransaction (proxyTokenContract : ByStr20, newOwner : ByStr20)
  transaction = RequestOwnershipTransfer newOwner;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new ProxyRequestOwnershipTransfer transaction for future signoff *)
transition SubmitCustomProxyRequestOwnershipTransferTransaction (proxyTokenContract : ByStr20, impl : ByStr20, newOwner : ByStr20)
  transaction = ProxyRequestOwnershipTransfer impl newOwner;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new ProxyConfirmOwnershipTransfer transaction for future signoff *)
transition SubmitCustomProxyConfirmOwnershipTransferTransaction (proxyTokenContract : ByStr20, impl : ByStr20)
  transaction = ProxyConfirmOwnershipTransfer impl;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new ProxyTransferOwnership transaction for future signoff *)
transition SubmitCustomProxyTransferOwnershipTransaction (proxyTokenContract : ByStr20, impl : ByStr20, newOwner : ByStr20)
  transaction = ProxyTransferOwnership impl newOwner;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new ProxyTransferOwnership transaction for future signoff *)
transition SubmitCustomTransferOwnershipTransaction (proxyTokenContract : ByStr20, newOwner : ByStr20)
  transaction = TransferOwnership newOwner;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new SetCreditAmount transaction for future signoff *)
transition SubmitCustomSetCreditAmountTransaction (proxyTokenContract : ByStr20, amount : Uint128)
  transaction = SetCreditAmount amount;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new UpgradeWalletOwner transaction for future signoff *)
transition SubmitCustomUpgradeWalletOwnerTransaction (proxyTokenContract : ByStr20, newOwner : ByStr20)
  transaction = UpgradeWalletOwner newOwner;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new ProxyMint transaction for future signoff *)
transition SubmitCustomProxyMintTransaction (proxyTokenContract : ByStr20, recipient : ByStr20, amount : Uint128)
  transaction = ProxyMint recipient amount;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new ProxyBurn transaction for future signoff *)
transition SubmitCustomProxyBurnTransaction (proxyTokenContract : ByStr20, burn_account : ByStr20, amount : Uint128)
  transaction = ProxyBurn burn_account amount;
  SubmitCustomTransaction proxyTokenContract transaction
end

(* Submit a new IncreaseAllowance transaction for future signoff; mainly as this guy may hold some Tokens *)
transition SubmitCustomIncreaseAllowanceTransaction (proxyTokenContract : ByStr20, spender : ByStr20, amount : Uint128)
  transaction = IncreaseAllowance spender amount;
  SubmitCustomTransaction proxyTokenContract transaction
end


(* Sign off on an existing transaction *)
transition SignTransaction (transactionId : Uint32)
  (* Only owners are allowed to sign off transactions *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSign;
    ThrowError err
  | True =>
    (* Transaction must have been submitted *)
    transaction <- transactions[transactionId];
    match transaction with
    | None =>
      err = UnknownTransactionId;
      ThrowError err
    | Some _ =>
      (* Remaining error cases handled by AddSignature *)
      AddSignature transactionId _sender
    end
  end
end

(* Revoke signature of existing transaction, if it has not yet been executed. *)
transition RevokeSignature (transactionId : Uint32)
  sig <- exists signatures[transactionId][_sender];
  match sig with
  | False =>
    err = NotAlreadySigned;
    ThrowError err
  | True =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      err = IncorrectSignatureCount;
      ThrowError err
    | Some c =>
      c_is_zero = builtin eq c zero;
      match c_is_zero with
      | True =>
        err = IncorrectSignatureCount;
        ThrowError err
      | False =>
        new_c = builtin sub c one;
        signature_counts[transactionId] := new_c;
        delete signatures[transactionId][_sender];
        e = mk_signature_revoked_event transactionId;
        event e
      end
    end
  end
end

(* Delete transaction and signatures *)
procedure DeleteTransaction (transactionId : Uint32)
  delete transactions[transactionId];
  delete signatures[transactionId];
  delete signature_counts[transactionId]
end

(* Execute native token transaction. *)
(* Checks permission to execute, and checks for sufficient balance. *)
(* Assumes the transaction has been signed off by enough owners. *)
procedure ExecuteNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  (* Only the recipient or an owner can execute the transaction *)
  recipient_is_sender = builtin eq recipient _sender;
  sender_is_owner <- exists owners[_sender];
  sender_may_execute = orb recipient_is_sender sender_is_owner;
  match sender_may_execute with
  | False =>
    err = SenderMayNotExecute;
    ThrowError err
  | True =>
    (* Check for sufficient funds  *)
    bal <- _balance;
    not_enough_money = builtin lt bal amount;
    match not_enough_money with
    | True =>
      err = InsufficientFunds;
      ThrowError err
    | False =>
      (* Transaction approved, and enough money available. *)
      (* Execute transaction *)
      msgs = native_transaction_msg_as_list recipient amount tag;
      send msgs
    end
  end
end

(* Execute custom token transaction. *)
(* Checks permission to execute. *)
(* Assumes the transaction has been signed off by enough owners. *)
procedure ExecuteCustomTokenTransaction (proxyTokenContract : ByStr20, tokenTransaction : TokenTransaction)
  (* Only owners may execute *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = SenderMayNotExecute;
    ThrowError err
  | True =>
    as_msg = custom_token_transaction_msg_as_list proxyTokenContract tokenTransaction;
    send as_msg
  end
end

(* Execute signed-off transaction *)
transition ExecuteTransaction (transactionId : Uint32)
  transaction_opt <- transactions[transactionId];
  match transaction_opt with
  | None =>
    (* Transaction was not found. *)
    err = UnknownTransactionId;
    ThrowError err
  | Some transaction =>
    sig_count_opt <- signature_counts[transactionId];
    match sig_count_opt with
    | None =>
      (* Signature count not found, even though the transaction exists.*)
      err = NoSignatureListFound;
      ThrowError err
    | Some sig_count =>
      not_enough_signatures = builtin lt sig_count required_signatures;
      match not_enough_signatures with
      | True =>
        err = NotEnoughSignatures;
        ThrowError err
      | False =>
        match transaction with
        | NativeTransaction recipient amount tag =>
          ExecuteNativeTransaction recipient amount tag
        | CustomTokenTransaction proxyTokenContract tokenTransaction =>
          ExecuteCustomTokenTransaction proxyTokenContract tokenTransaction
        end;
        (* Remove transaction and signatures. *)
        (* Note: The transaction may have failed, but without a callback *)
        (* we have no way of detecting whether it did *)
        DeleteTransaction transactionId
      end
    end
  end
end

(* Add native funds to wallet *)
transition AddFunds ()
  accept
end

(* Callback transition - no action required, but must be defined, since transfers from the wallet will fail otherwise. *)
transition TransferSuccessCallBack (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

(* Acceptance transition - no action required, but must be defined, since transfers to the wallet will fail otherwise. *)
transition RecipientAcceptTransfer (sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

(* Callback transition - no action required, but must be defined, since transferFroms from the wallet will fail otherwise. *)
transition TransferFromSuccessCallBack (initiator: ByStr20, sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

(* Callback transition - no action required, but must be defined, since mints from the wallet will fail otherwise. *)
transition MintSuccessCallBack (recipient : ByStr20, amount : Uint128)
end

(* Callback transition - no action required, but must be defined, since lawEnforcemetWipingBurns from the wallet will fail otherwise. *)
transition LawEnforcementWipingBurnSuccessCallBack (address : ByStr20)
end

(* Callback transition - no action required, but must be defined, since burns from the wallet will fail otherwise. *)
transition BurnSuccessCallBack (sender : ByStr20, amount : Uint128)
end

(* Acceptance transition - no action required, but must be defined, since transferFroms to the wallet will fail otherwise. *)
transition RecipientAcceptTransferFrom (initiator: ByStr20, sender : ByStr20, recipient : ByStr20, amount : Uint128)
end

(* Acceptance transition - no action required, but must be defined, since mints to the wallet will fail otherwise. *)
transition RecipientAcceptMint (recipient : ByStr20, amount : Uint128)
end