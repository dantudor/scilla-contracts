scilla_version 0

library SSNListProxy

let zero = Uint128 0
let multisig_tag_addfunds = "AddFunds"


let one_msg =
  fun (m : Message) =>
    let e = Nil {Message} in
    Cons {Message} m e

type SsnRewardShare =
| SsnRewardShare of ByStr20 Uint128

contract SSNListProxy(
  init_implementation : ByStr20,
  init_admin : ByStr20
)

field implementation : ByStr20 = init_implementation
field admin : ByStr20 = init_admin

procedure TransferFunds (tag: String, amount : Uint128, recipient : ByStr20)
    msg = {_tag : tag; _recipient : recipient; _amount : amount};
    msgs = one_msg msg;
    send msgs
end

transition upgradeTo(newImplementation : ByStr20)
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      implementation := newImplementation;
      e = {_eventname : "Upgraded"; implementation_address : newImplementation};
      event e
    | False =>
      e = {_eventname : "upgradeTo FailedNotAdmin"; newImplementation : newImplementation};
      event e
    end
end

transition changeProxyAdmin(newAdmin : ByStr20)
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      admin := newAdmin;
      e = {_eventname : "AdminChanged"; oldAdmin : currentAdmin; newAdmin : newAdmin};
      event e
    | False =>
      e = {_eventname : "changeAdmin FailedNotAdmin"; newAdmin : newAdmin};
      event e
    end
end

transition drainProxyContractBalance()
    currentAdmin <- admin;
    isAdmin = builtin eq currentAdmin _sender;
    match isAdmin with
    | True =>
      bal <- _balance;
      TransferFunds multisig_tag_addfunds bal _sender;
      e = {_eventname : "drainProxyContractBalance"};
      event e
    | False =>
      e = {_exception : "drainProxyContractBalance FailedNotAdmin"};
      throw e
    end
end

transition pause()
    current_impl <- implementation;
    msg = {_tag : "pause"; _recipient : current_impl; _amount : zero; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition unpause()
    current_impl <- implementation;
    msg = {_tag : "unpause"; _recipient : current_impl; _amount : zero; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end


transition update_admin (admin : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "update_admin"; _recipient : current_impl; _amount : zero; admin : admin; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition update_verifier (verif : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "update_verifier"; _recipient : current_impl; _amount : zero; verif : verif; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition drain_contract_balance ()
    current_impl <- implementation;
    msg = {_tag : "drain_contract_balance"; _recipient : current_impl; _amount : zero; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition update_staking_parameter (min_stake : Uint128, max_stake : Uint128, contract_max_stake : Uint128)
    current_impl <- implementation;
    msg = {_tag : "update_staking_parameter"; _recipient : current_impl; _amount : zero; min_stake : min_stake; max_stake : max_stake; contract_max_stake : contract_max_stake; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition add_ssn (ssnaddr : ByStr20, urlraw : String, urlapi : String)
    current_impl <- implementation;
    msg = {_tag : "add_ssn"; _recipient : current_impl; _amount : zero; ssnaddr: ssnaddr; urlraw: urlraw; urlapi: urlapi; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition add_ssn_after_upgrade (ssnaddr : ByStr20, stake_amount : Uint128, rewards : Uint128, urlraw : String, urlapi : String, buffered_deposit : Uint128)
    current_impl <- implementation;
    msg = {_tag : "add_ssn_after_upgrade"; _recipient : current_impl; _amount : zero; ssnaddr: ssnaddr; stake_amount : stake_amount; rewards: rewards; urlraw: urlraw; urlapi: urlapi; buffered_deposit: buffered_deposit; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition remove_ssn (ssnaddr : ByStr20)
    current_impl <- implementation;
    msg = {_tag : "remove_ssn"; _recipient : current_impl; _amount : zero; ssnaddr: ssnaddr; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition stake_deposit ()
    current_impl <- implementation;
    accept;
    msg = {_tag : "stake_deposit"; _recipient : current_impl; _amount : _amount; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition assign_stake_reward (ssnreward_list : List SsnRewardShare, reward_blocknum : Uint32)
    current_impl <- implementation;
    msg = {_tag : "assign_stake_reward"; _recipient : current_impl; _amount : zero; ssnreward_list: ssnreward_list; reward_blocknum : reward_blocknum; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition withdraw_stake_rewards ()
    current_impl <- implementation;
    msg = {_tag : "withdraw_stake_rewards"; _recipient : current_impl; _amount : zero; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition withdraw_stake_amount (amount : Uint128 )
    current_impl <- implementation;
    msg = {_tag : "withdraw_stake_amount"; _recipient : current_impl; _amount : zero; amount: amount; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end

transition AddFunds ()
    current_impl <- implementation;
    accept;
    msg = {_tag : "AddFunds"; _recipient : current_impl; _amount : _amount; initiator : _sender};
    msgs = one_msg msg;
    send msgs
end