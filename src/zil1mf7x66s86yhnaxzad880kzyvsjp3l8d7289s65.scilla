scilla_version 0
import BoolUtils IntUtils ListUtils
library SGDXContract
let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let orb_3 =
  fun (a : Bool) => fun (b : Bool) => fun (c : Bool) =>
    let t = orb a b in
    orb c t

let orb_4 =
  fun (a : Bool) => fun (b : Bool) => fun (c : Bool) => fun (d : Bool) =>
    let t1 = orb a b in
    let t2 = orb t1 c in
    orb t2 d
let one_msg =
    fun (msg : Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg
let f_eq =
  fun (a : ByStr20) =>
  fun (b : ByStr20) =>
    builtin eq a b
let isDefaultOperator = @list_mem ByStr20
let zero = Uint128 0
let one  = Uint128 1
let true = True
let false = False
contract SGDXContract
(
  name :    String,
  symbol :  String,
  decimals : Uint32,
  init_owner : ByStr20,
  default_operators : List ByStr20,
  proxy_address : ByStr20
)
field owner : ByStr20 = init_owner
field pauser : ByStr20 = init_owner
field masterMinter : ByStr20 = init_owner
field paused : Bool = False
field blacklister : ByStr20 = init_owner
field blacklisted : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field revokedDefaultOperators : Map ByStr20 (Map ByStr20 Bool) = Emp ByStr20 (Map ByStr20 Bool)
field balances : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field allowed : Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)
field totalSupply : Uint128  = zero
field minters : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field minterAllowed : Map ByStr20 Uint128 = Emp ByStr20 Uint128
transition reauthorizeDefaultOperator(operator : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    isDefaultOperator = isDefaultOperator f_eq operator default_operators;
    match isDefaultOperator with
    | True  =>
      delete revokedDefaultOperators[initiator][operator];
      e = { _eventname : "ReAuthorizedDefaultOperator"; operator : operator; sender : initiator};
      event e
    | False =>
    end
  end
end
transition revokeDefaultOperator(operator : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    isDefaultOperator =  isDefaultOperator f_eq operator default_operators;
    match isDefaultOperator with
    | True  =>
      revokedDefaultOperators[initiator][operator] := true;
      e = {_eventname : "RevokedDefaultOperator"; operator : operator; sender : initiator};
      event e
    | False =>
    end
  end
end
transition transferOwnership(newOwner : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    current_owner <- owner;
    isowner = builtin eq initiator current_owner;
    match isowner with
    | True =>
      owner := newOwner;
      e = {_eventname : "OwnershipTransferred"; from : initiator; to : newOwner};
	    event e
    | False =>
    end
  end
end
transition pause(initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    current_pauser <- pauser;
    ispauser = builtin eq current_pauser initiator;
    match ispauser with
    | True  =>
      paused := true;
      e = { _eventname : "Paused"};
      event e
    | False =>
    end
  end
end
transition unpause(initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    current_pauser <- pauser;
    ispauser = builtin eq current_pauser initiator;
    match ispauser with
    | True  =>
      paused := false;
      e = {_eventname : "Unpaused"};
      event e
    | False =>
    end
  end
end
transition updatePauser(newPauser : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    current_owner <- owner;
    isowner = builtin eq initiator current_owner;
    match isowner with
    | True  =>
      pauser := newPauser;
      e = {_eventname : "PauserUpdated"; pauser : newPauser};
      event e
    | False =>
    end
  end
end
transition blacklist(address : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    current_blacklister <- blacklister;
    isblacklister = builtin eq current_blacklister initiator;
    match isblacklister with
    | True =>
      blacklisted[address] := one;
      e = {_eventname : "Blacklisted"; address : address};
      event e
    | False =>
    end
  end
end
transition unBlacklist(address : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    current_blacklister <- blacklister;
    isblacklister = builtin eq current_blacklister initiator;
    match isblacklister with
    | True =>
      delete blacklisted[address];
      e = {_eventname : "UnBlacklisted"; address : address};
      event e
    | False =>
    end
  end
end
transition updateBlacklister(newBlacklister : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True =>
    current_owner <- owner;
    isowner = builtin eq initiator current_owner;
    match isowner with
    | True =>
      blacklister:= newBlacklister;
      e = {_eventname : "BlacklisterUpdated"; blacklister : newBlacklister};
      event e
    | False =>
    end
  end
end
transition updateMasterMinter(newMasterMinter : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    current_owner <- owner;
    isowner = builtin eq initiator current_owner;
    match isowner with
    | True =>
      masterMinter := newMasterMinter;
      e = {_eventname : "MasterMinterUpdated"; masterMinter : newMasterMinter};
      event e
    | False =>
    end
  end
end
transition configureMinter(minter : ByStr20, minterAllowedAmount : Uint128, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    isPaused <- paused;
    currentMasterMinter <- masterMinter;
    isMasterMinter = builtin eq initiator currentMasterMinter;
    or_res = let tmp = negb isMasterMinter in orb isPaused tmp;
    match or_res with
    | False =>
      minters[minter] := one;
      minterAllowed[minter] := minterAllowedAmount;
      e = { _eventname : "MinterConfigured"; minter : minter; amount : minterAllowedAmount};
      event e
    | True =>
    end
  end
end
transition removeMinter(minter : ByStr20, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    currentMasterMinter <- masterMinter;
    isMasterMinter = builtin eq initiator currentMasterMinter;
    match isMasterMinter with
    | True =>
      delete minters[minter];
      minterAllowed[minter] := zero;
      e = { _eventname : "MinterRemoved"; minter : minter};
      event e
    | False =>
    end
  end
end
transition mint(to: ByStr20, value : Uint128, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    isPaused <- paused;
    isMinter <- exists minters[initiator];
    isBlacklistedMinter <- exists blacklisted[initiator];
    isBlacklistedRecipient <- exists blacklisted[to];
    or_res =
        let isNotMinter = negb isMinter in
         orb_4 isPaused isNotMinter isBlacklistedMinter isBlacklistedRecipient;
    match or_res with
    | False =>
      allowed_amount <- minterAllowed[initiator];
      match allowed_amount with
      | Some a =>
        within_limits = uint128_le value a;
        match within_limits with
        | True =>
          t <- totalSupply;
          new_tokens = builtin add value t;
          totalSupply := new_tokens;
          x <- balances[to];
          current_val = match x with
                        | Some v => v
                        | None   => zero
                        end;
          new_bal = builtin add value current_val;
          balances[to] := new_bal;
          new_allowed_amount = builtin sub a value;
          minterAllowed[initiator] := new_allowed_amount;
          e = {_eventname : "Minted"; minter : initiator; amount : value; recipient : to};
          event e
        | False =>
        end
      | None =>
      end
    | True =>
    end
  end
end
transition burn(value : Uint128, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    isPaused <- paused;
    isMinter <- exists minters[initiator];
    isBlacklistedMinter <- exists blacklisted[initiator];
    or_res =
    let isNotMinter = negb isMinter in
      orb_3 isPaused isBlacklistedMinter isNotMinter;

    match or_res with
    | False =>
      bal <- balances[initiator];
      match bal with
      | Some b =>
        can_do = uint128_le value b;
        match can_do with
        | True =>
          new_balance = builtin sub b value;
          balances[initiator] := new_balance;
          currentSupply <- totalSupply;
          new_supply = builtin sub currentSupply value;
          totalSupply := new_supply;
          e = { _eventname : "Burnt"; burner : initiator; amount : value};
          event e
        | False =>
        end
      | None =>
      end
    | True =>
    end
  end
end
transition approve(spender : ByStr20, value : Uint128, initiator : ByStr20)
    callerIsProxy = builtin eq _sender proxy_address;
    match callerIsProxy with
    | False =>
    | True  =>
      isPaused <- paused;
      isBlacklistedInitiator <- exists blacklisted[initiator];
      isblacklistedSpender   <- exists blacklisted[spender];
      or_res = orb_3 isPaused isBlacklistedInitiator isblacklistedSpender;
      match or_res with
      | False =>
        allowed[initiator][spender] := value;
        e = {_eventname : "Approved"; sender : initiator; spender : spender; amount : value};
        event e;
        msg = {_tag : "ApproveSuccessCallBack"; _recipient : initiator; _amount : zero;
               sender : initiator; spender : spender; amount : value };
        msgs = one_msg msg;
        send msgs
      | True =>
      end
    end
end
transition transfer(to : ByStr20, value : Uint128, initiator : ByStr20)
    callerIsProxy = builtin eq _sender proxy_address;
    match callerIsProxy with
    | False =>
    | True  =>
      isPaused <- paused;
      isBlacklistedInitiator  <- exists blacklisted[initiator];
      isBlacklistedRecipient  <- exists blacklisted[to];
      or_res = orb_3 isPaused isBlacklistedInitiator isBlacklistedRecipient;
      match or_res with
      | False =>
        bal <- balances[initiator];
        match bal with
        | Some b =>
          can_do = uint128_le value b;
          match can_do with
          | True =>
            new_initiator_bal = builtin sub b value;
            balances[initiator] := new_initiator_bal;
            to_bal <- balances[to];
            new_to_bal = match to_bal with
                | Some x => builtin add x value
                | None => value
            end;
            balances[to] := new_to_bal;
            e = {_eventname : "Transfer"; sender : initiator; recipient : to; amount : value};
            event e;
            msg = {_tag : "TransferSuccessCallBack"; _recipient : initiator; _amount : zero;
                   sender : initiator; recipient : to; amount : value};
            msgs = one_msg msg;
            send msgs
          | False =>
          end
        | None =>
        end
      | True =>
      end
   end
end
transition transferFrom (from : ByStr20, to : ByStr20, value : Uint128, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    isPaused <- paused;
    isBlacklistedInitiator <- exists blacklisted[initiator];
    isBlacklistedRecipient <- exists blacklisted[to];
    isBlacklistedFrom <- exists blacklisted[from];
    or_res = orb_4 isPaused isBlacklistedInitiator isBlacklistedRecipient isBlacklistedFrom;
    match or_res with
    | False =>
      bal <- balances[from];
      sender_allowed_from <- allowed[from][initiator];
      match bal with
      | Some a =>
        match sender_allowed_from with
        | Some b =>
          t = min_int a b;
          can_do = uint128_le value t;
          match can_do with
          | True =>
            new_from_bal = builtin sub a value;
            balances[from] := new_from_bal;
            to_bal <- balances[to];
            match to_bal with
            | Some tb =>
              new_to_bal = builtin add tb value;
              balances[to] := new_to_bal
            | None =>
              balances[to] := value
            end;
            new_allowed = builtin sub b value;
            allowed[from][initiator] := new_allowed;
            e = {_eventname : "TransferFromSuccess"; recipient : to; sender : from; initiator : initiator; amount : value};
            event e;
            msg = {_tag : "TransferFromSuccessCallBack"; _recipient : initiator; _amount : zero;
                   sender : from; recipient : to; amount : value };
            msgs = one_msg msg;
            send msgs
          | False =>
          end
          | None =>
          end
        | None =>
	    end
    | True =>
    end
  end
end
transition operatorSend (from : ByStr20, to : ByStr20, value : Uint128, initiator : ByStr20)
  callerIsProxy = builtin eq _sender proxy_address;
  match callerIsProxy with
  | False =>
  | True  =>
    isPaused <- paused;
    isBlacklistedInitiator <- exists blacklisted[initiator];
    isBlacklistedRecipient <- exists blacklisted[to];
    isBlacklistedFrom <- exists blacklisted[from];
    or_res = orb_4 isPaused isBlacklistedInitiator isBlacklistedRecipient isBlacklistedFrom;
    match or_res with
    | True  =>
    | False =>
      isDefaultOperator =  isDefaultOperator f_eq initiator default_operators;
      isRevokedOperator <- exists revokedDefaultOperators[from][initiator];
      isAllowed = let isNotRevokedOperator = negb isRevokedOperator in andb  isNotRevokedOperator isDefaultOperator;
      match isAllowed with
      | False =>
      | True  =>
        bal <- balances[from];
        match bal with
        | Some b =>
          can_do = uint128_le value b;
          match can_do with
          | True =>
            new_from_bal = builtin sub b value;
            balances[from] := new_from_bal;
            to_bal <- balances[to];
            new_to_bal =  match to_bal with
                          | Some x => builtin add x value
                          | None => value
                          end;
            balances[to] := new_to_bal;
            e = {_eventname : "OperatorSendSuccess"; operator : initiator; from : from; recipient : to; amount : value};
            event e;
            msg = {_tag : "operatorSendSuccess"; _recipient : initiator; _amount : zero;
                   operator : initiator; from : from; recipient : to; amount : value};
            msgs = one_msg msg;
            send msgs
            | False =>
            end
        | None =>
        end
      end
    end
  end
end
