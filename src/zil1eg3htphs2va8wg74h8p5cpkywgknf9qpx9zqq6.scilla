scilla_version 0

import ListUtils IntUtils BoolUtils

library WalletLib

let mk_contract_initialized_event =
  { _eventname : "Contract initialized" }

let mk_transaction_added_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction created" ;
     transactionId : tc }

let mk_signed_transaction_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction signed"; transactionId : tc }

let mk_signature_revoked_event =
  fun (tc : Uint32) =>
    { _eventname : "Signature revoked"; transactionId : tc }

type Error =
| NonOwnerCannotSign
| UnknownTransactionId
| InsufficientFunds
| NoSignatureListFound
| AlreadySigned
| NotAlreadySigned
| InvalidAmount
| NotEnoughSignatures
| SenderMayNotExecute
| NonOwnerCannotSubmit
| IncorrectSignatureCount

let mk_error_event =
  fun (err : Error) =>
  let err_code =
    match err with
    | NonOwnerCannotSign        => Int32 -1
    | UnknownTransactionId      => Int32 -2
    | InsufficientFunds         => Int32 -3
    | NoSignatureListFound      => Int32 -4
    | AlreadySigned             => Int32 -5
    | NotAlreadySigned          => Int32 -6
    | InvalidAmount             => Int32 -7
    | NotEnoughSignatures       => Int32 -8
    | SenderMayNotExecute       => Int32 -9
    | NonOwnerCannotSubmit      => Int32 -10
    | IncorrectSignatureCount   => Int32 -11
    end in
  { _eventname : "WalletError" ; err_code : err_code }

let t = True
let f = False
let zero = Uint32 0
let zeroUint128 = Uint128 0
let one = Uint32 1
let transaction_inc = one

type ProxyTransaction =
| UpgradeTo of ByStr20
| Pause
| Unpause
| ChangeProxyAdmin of ByStr20
| DrainProxyContractBalance
| UpdateAdmin of ByStr20
| UpdateVerifier of ByStr20
| DrainContractBalance
| AddSsn of ByStr20 String String
| AddSsnAfterUpgrade of ByStr20 Uint128 Uint128 String String Uint128
| UpdateContractStakeParameter of Uint128 Uint128 Uint128(*remove_ssn (ssnaddr : ByStr20) *)
| RemoveSsn of ByStr20 

type Transaction =
| NativeTransaction of ByStr20 Uint128 String
| CustomTransaction of ByStr20 ProxyTransaction

let mk_owners_map =
  fun (owners : List ByStr20) =>
    let init = Emp ByStr20 Bool in
    let iter =
      fun (acc : Map ByStr20 Bool) =>
      fun (cur_owner : ByStr20) =>
        builtin put acc cur_owner t
        in
    let folder = @list_foldl ByStr20 (Map ByStr20 Bool) in
    folder iter init owners

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let native_transaction_msg_as_list =
  fun (recipient : ByStr20) =>
  fun (amount : Uint128) =>
  fun (tag : String) =>
    let msg = {_tag : tag; _recipient : recipient; _amount : amount } in
    one_msg msg

let custom_transaction_msg_as_list =
  fun (proxyContract : ByStr20) =>
  fun (proxyTransaction : ProxyTransaction) =>
    let msg =
      match proxyTransaction with
      | UpgradeTo newImplementation =>
        {_recipient : proxyContract ;
         _tag : "upgradeTo" ;
         _amount : zeroUint128 ;
         newImplementation : newImplementation }
      | Pause =>
        {_recipient : proxyContract ;
        _tag : "pause" ;
        _amount : zeroUint128 }
      | Unpause =>
        {_recipient : proxyContract ;
        _tag : "unpause" ;
        _amount : zeroUint128 }   
      | ChangeProxyAdmin newAdmin =>
        {_recipient : proxyContract ;
         _tag : "changeProxyAdmin" ;
         _amount : zeroUint128 ;
         newAdmin : newAdmin }
      | DrainProxyContractBalance =>
        {_recipient : proxyContract ;
         _tag : "drainProxyContractBalance" ;
         _amount : zeroUint128}
      | UpdateAdmin admin =>
        {_recipient : proxyContract;
         _tag : "update_admin" ;
         _amount : zeroUint128 ;
         admin : admin}
      | UpdateVerifier verif =>
        {_recipient : proxyContract ;
         _tag : "update_verifier" ;
         _amount : zeroUint128 ;
         verif : verif}
      | DrainContractBalance  =>
        {_recipient : proxyContract ;
         _tag : "drain_contract_balance" ;
         _amount : zeroUint128}
      | UpdateContractStakeParameter min_stake max_stake contract_max_stake =>
        {_recipient : proxyContract ;
         _tag : "update_staking_parameter" ;
         _amount : zeroUint128 ;
         min_stake : min_stake;
         max_stake : max_stake;
         contract_max_stake : contract_max_stake}
      | AddSsn ssnaddr urlraw urlapi =>
        {_recipient : proxyContract ;
         _tag : "add_ssn" ;
         _amount : zeroUint128 ;
         ssnaddr : ssnaddr;
         urlraw : urlraw;
         urlapi : urlapi}
      | AddSsnAfterUpgrade ssnaddr stake_amount rewards urlraw urlapi buffered_deposit =>
        {_recipient : proxyContract ;
         _tag : "add_ssn_after_upgrade" ;
         _amount : zeroUint128 ;
         ssnaddr : ssnaddr;
         stake_amount : stake_amount;
         rewards : rewards;
         urlraw : urlraw;
         urlapi : urlapi;
         buffered_deposit : buffered_deposit}
      | RemoveSsn ssnaddr =>
        {_recipient : proxyContract ;
         _tag : "remove_ssn" ;
         _amount : zeroUint128 ;
         ssnaddr : ssnaddr}   
      end
    in
    one_msg msg

contract Wallet
(
owners_list         : List ByStr20,
required_signatures : Uint32
)
with
  let len = @list_length ByStr20 in
  let no_of_owners = len owners_list in
  let owners_ok = builtin lt zero no_of_owners in
  let required_sigs_not_too_low = builtin lt zero required_signatures in
  let required_sigs_too_high = builtin lt no_of_owners required_signatures in
  let required_sigs_not_too_high = negb required_sigs_too_high in
  let required_sigs_ok = andb required_sigs_not_too_high required_sigs_not_too_low in
  let all_ok = andb required_sigs_ok owners_ok in
  (* Building the owners map is expensive, so avoid checking the owners map until *)
  (* everything else has been checked *)
  match all_ok with
  | True =>
    let owners_map = mk_owners_map owners_list in
    let size_of_owners_map = builtin size owners_map in
    builtin eq size_of_owners_map no_of_owners
  | False =>
    False
  end
=>

field owners           : Map ByStr20 Bool = mk_owners_map owners_list

field transactionCount : Uint32 = Uint32 0

field signatures       : Map Uint32 (Map ByStr20 Bool) =
  Emp Uint32 (Map ByStr20 Bool)

field signature_counts : Map Uint32 Uint32 =
  Emp Uint32 Uint32

field transactions     : Map Uint32 Transaction =
                           Emp Uint32 Transaction

procedure MakeError (err : Error)
  e = mk_error_event err;
  event e
end

procedure AddSignature (transactionId : Uint32, signee : ByStr20)
  sig <- exists signatures[transactionId][signee];
  match sig with
  | False =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      signature_counts[transactionId] := one
    | Some c =>
      new_c = builtin add c one;
      signature_counts[transactionId] := new_c
    end;
    signatures[transactionId][signee] := t;
    e = mk_signed_transaction_event transactionId;
    event e
  | True =>
    err = AlreadySigned;
    MakeError err
  end
end

procedure SubmitTransaction (transaction : Transaction)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSubmit;
    MakeError err
  | True =>
    tc <- transactionCount;
    transactions[tc] := transaction;
    (* Sender implicitly signs *)
    AddSignature tc _sender;
    (* Increment transaction counter *)
    tc_new = builtin add tc transaction_inc;
    (* Update transaction count *)
    transactionCount := tc_new;
    (* Create event with transaction Id *)
    e = mk_transaction_added_event tc;
    event e
  end
end

transition SubmitNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  amount_is_zero = builtin eq amount zeroUint128;
  match amount_is_zero with
  | True =>
    (* Illegal transaction *)
    err = InvalidAmount;
    MakeError err
  | False =>
    transaction = NativeTransaction recipient amount tag;
    SubmitTransaction transaction
  end
end

procedure SubmitCustomTransaction (proxyContract : ByStr20, proxyTransaction : ProxyTransaction)
  transaction = CustomTransaction proxyContract proxyTransaction;
  SubmitTransaction transaction
end

transition SubmitCustomUpgradeToTransaction (proxyContract : ByStr20, newImplementation : ByStr20)
  transaction = UpgradeTo newImplementation;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomPauseTransaction (proxyContract : ByStr20)
  transaction = Pause;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomUnpauseTransaction (proxyContract : ByStr20)
  transaction = Unpause;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomChangeProxyAdminTransaction (proxyContract : ByStr20, newAdmin : ByStr20)
  transaction = ChangeProxyAdmin newAdmin;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomDrainProxyContractBalance (proxyContract : ByStr20)
  transaction = DrainProxyContractBalance;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomUpdateAdminTransaction (proxyContract : ByStr20, admin : ByStr20)
  transaction = UpdateAdmin admin;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomUpdateVerifierTransaction (proxyContract : ByStr20, verif : ByStr20)
  transaction = UpdateVerifier verif;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomDrainContractBalanceTransaction (proxyContract : ByStr20)
  transaction = DrainContractBalance;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomUpdateStakingParameterTransaction (proxyContract : ByStr20, min_stake : Uint128, max_stake : Uint128, contract_max_stake : Uint128)
  transaction = UpdateContractStakeParameter min_stake max_stake contract_max_stake;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomAddSsnTransaction (proxyContract : ByStr20, ssnaddr : ByStr20, urlraw : String, urlapi : String)
  transaction = AddSsn ssnaddr urlraw urlapi;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomAddSsnAfterUpgradeTransaction (proxyContract : ByStr20, ssnaddr : ByStr20, stake_amount : Uint128, rewards : Uint128, urlraw : String, urlapi : String, buffered_deposit : Uint128)
  transaction = AddSsnAfterUpgrade ssnaddr stake_amount rewards urlraw urlapi buffered_deposit;
  SubmitCustomTransaction proxyContract transaction
end

transition SubmitCustomRemoveSsnTransaction (proxyContract : ByStr20, ssnaddr : ByStr20)
  transaction = RemoveSsn ssnaddr;
  SubmitCustomTransaction proxyContract transaction
end

transition SignTransaction (transactionId : Uint32)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSign;
    MakeError err
  | True =>
    transaction <- transactions[transactionId];
    match transaction with
    | None =>
      err = UnknownTransactionId;
      MakeError err
    | Some _ =>
      (* Remaining error cases handled by AddSignature *)
      AddSignature transactionId _sender
    end
  end
end

transition RevokeSignature (transactionId : Uint32)
  sig <- exists signatures[transactionId][_sender];
  match sig with
  | False =>
    err = NotAlreadySigned;
    MakeError err
  | True =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      err = IncorrectSignatureCount;
      MakeError err
    | Some c =>
      c_is_zero = builtin eq c zero;
      match c_is_zero with
      | True =>
        err = IncorrectSignatureCount;
        MakeError err
      | False =>
        new_c = builtin sub c one;
        signature_counts[transactionId] := new_c;
        delete signatures[transactionId][_sender];
        e = mk_signature_revoked_event transactionId;
        event e
      end
    end
  end
end

procedure DeleteTransaction (transactionId : Uint32)
  delete transactions[transactionId];
  delete signatures[transactionId];
  delete signature_counts[transactionId]
end

procedure ExecuteNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  recipient_is_sender = builtin eq recipient _sender;
  sender_is_owner <- exists owners[_sender];
  sender_may_execute = orb recipient_is_sender sender_is_owner;
  match sender_may_execute with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    bal <- _balance;
    not_enough_money = builtin lt bal amount;
    match not_enough_money with
    | True =>
      err = InsufficientFunds;
      MakeError err
    | False =>
      msgs = native_transaction_msg_as_list recipient amount tag;
      send msgs
    end
  end
end

procedure ExecuteCustomTransaction (proxyContract : ByStr20, proxyTransaction : ProxyTransaction)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    as_msg = custom_transaction_msg_as_list proxyContract proxyTransaction;
    send as_msg
  end
end

transition ExecuteTransaction (transactionId : Uint32)
  transaction_opt <- transactions[transactionId];
  match transaction_opt with
  | None =>
    err = UnknownTransactionId;
    MakeError err
  | Some transaction =>
    sig_count_opt <- signature_counts[transactionId];
    match sig_count_opt with
    | None =>
      err = NoSignatureListFound;
      MakeError err
    | Some sig_count =>
      not_enough_signatures = builtin lt sig_count required_signatures;
      match not_enough_signatures with
      | True =>
        err = NotEnoughSignatures;
        MakeError err
      | False =>
        match transaction with
        | NativeTransaction recipient amount tag =>
          ExecuteNativeTransaction recipient amount tag
        | CustomTransaction proxyContract proxyTransaction =>
          ExecuteCustomTransaction proxyContract proxyTransaction
        end;
        DeleteTransaction transactionId
      end
    end
  end
end

transition AddFunds ()
  accept
end