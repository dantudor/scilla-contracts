
(* sourceCodeHash=0x5ee0ca96df18a0e0cb34967800c6282eda110993f464dc1702609e694c82bd63 *)
(* sourceCodeHashKey=hash_0x5ee0ca96df18a0e0cb34967800c6282eda110993f464dc1702609e694c82bd63 *)
scilla_version 0




import IntUtils ListUtils
library CommunityMinter


let max_mint_quantity = Uint128 10
let zero = Uint128 0
let one = Uint128 1
let one_uint32 = Uint32 1
let none = None {ByStr20}
let false = False
let true = True
let empty = ""


let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let build_mint_msgs : ByStr20 -> ByStr20 -> Uint32 -> List (Message) =
  fun (nft_address : ByStr20) => fun (to: ByStr20) => fun (m: Uint32) =>
    let z = Uint32 0 in
    let zero_lt_m = builtin lt z m in
    match zero_lt_m with
    | True =>
        
        let m_nat = builtin to_nat m in
        let nil = Nil {Message} in
        let list_init = nil in
        let msg = { _tag: "Mint"; _recipient: nft_address; _amount: zero; to: to; token_uri: empty } in
        let step = fun (list :  List (Message)) => fun (ignore : Nat) =>
          let new_list = Cons {Message} msg list in
          new_list
        in
        let fold = @nat_fold (List (Message)) in
        let xs_m = fold step list_init m_nat in
        xs_m
    | False => Nil {Message}
    end


type Error =
  | CodeNotOwner
  | CodeNotPendingOwner
  | CodePendingOwnerNotEmpty
  | CodeSaleNotActive
  | CodeSaleNotInactive
  | CodeExceedMaxMintQuantity
  | CodeIncorrectAmount
  | CodeInsufficientWithdrawBalance
  | CodeInvalidSender
  | CodeInsufficientFunds

let make_error =
  fun (result : Error) =>
    let result_code =
      match result with
      | CodeNotOwner                    => Int32 -1
      | CodeNotPendingOwner             => Int32 -2
      | CodePendingOwnerNotEmpty        => Int32 -3
      | CodeSaleNotActive               => Int32 -4
      | CodeSaleNotInactive             => Int32 -5
      | CodeExceedMaxMintQuantity       => Int32 -6
      | CodeIncorrectAmount             => Int32 -7
      | CodeInsufficientWithdrawBalance => Int32 -8
      | CodeInvalidSender               => Int32 -9
      | CodeInsufficientFunds           => Int32 -10
      end
    in
    { _exception : "Error"; code : result_code }





contract CommunityMinter
(
  contract_owner: ByStr20,
  nft_address: ByStr20,
  init_nft_price: Uint128,
  nft_price_increase: Uint128,
  buy_token_address: ByStr20
)


field nft_price : Uint128 = init_nft_price
field current_owner : Option ByStr20 = Some {ByStr20} contract_owner
field pending_owner : Option ByStr20 = none


field sale_active: Bool = False





procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsOwner(address: ByStr20)
  maybe_current_owner <- current_owner;
  match maybe_current_owner with
  | Some current_contract_owner =>
    is_owner = builtin eq current_contract_owner address;
    match is_owner with
    | True =>
    | False =>
      err = CodeNotOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure IsPendingOwner(address: ByStr20)
  maybe_pending_owner <- pending_owner;
  match maybe_pending_owner with
  | Some current_pending_owner =>
    is_pending_owner = builtin eq current_pending_owner address;
    match is_pending_owner with
    | True =>
    | False =>
      err = CodeNotPendingOwner;
      ThrowError err
    end
  | None =>
    err = CodeNotPendingOwner;
    ThrowError err
  end
end

procedure NoPendingOwner()
  maybe_pending_owner <- pending_owner;
  match maybe_pending_owner with
  | Some p =>
    err = CodePendingOwnerNotEmpty;
    ThrowError err
  | None =>
  end
end

procedure IsSaleActive()
  is_sale_active <- sale_active;
  match is_sale_active with
  | True =>
  | False =>
    err = CodeSaleNotActive;
    ThrowError err
  end
end

procedure IsSaleInactive()
  is_sale_active <- sale_active;
  match is_sale_active with
  | False =>
  | True =>
    err = CodeSaleNotInactive;
    ThrowError err
  end
end






transition EnableSale()
  IsOwner _sender;
  IsSaleInactive;

  sale_active := true;
  e = {_eventname: "SaleEnabled"};
  event e
end


transition DisableSale()
  IsOwner _sender;
  IsSaleActive;

  sale_active := false;
  e = {_eventname: "SaleDisabled"};
  event e
end





transition TransferOwnership(new_owner: ByStr20)
  IsOwner _sender;
  o = Some {ByStr20} new_owner;
  pending_owner := o;
  e = {_eventname : "OwnershipTransferInitiated"; current_owner : _sender; pending_owner : new_owner};
  event e
end


transition AcceptOwnership()
  IsPendingOwner _sender;
  previous_current_owner <- current_owner;
  o = Some {ByStr20} _sender;
  current_owner := o;
  pending_owner := none;
  e = {_eventname : "OwnershipTransferAccepted"; previous_current_owner : previous_current_owner; current_owner : _sender};
  event e
end


transition RevokeOwnership()
  IsOwner _sender;
  NoPendingOwner;
  current_owner := none;
  e = {_eventname : "OwnershipRevoked"; current_owner : _sender};
  event e
end


procedure TransferMsg(impl: ByStr20, beneficiary: ByStr20, amt: Uint128)
    msg = let m = {
        _tag: "Transfer";
        _recipient: impl;
        _amount: zero;
        to: beneficiary;
        amount: amt 
    } in one_msg m;
    send msg
end





transition Withdraw(amount : Uint128)
    IsOwner _sender;
    TransferMsg buy_token_address _sender amount
end





transition MintCallBack(recipient: ByStr20, token_id: Uint256, token_uri: String)
  
  msg_to_sender = {
    _tag : "MintCallBack"; _recipient : recipient; _amount : zero;
    recipient : recipient; token_id : token_id; token_uri : token_uri
  };
  msgs = one_msg msg_to_sender;
  send msgs
end


transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
  is_target = builtin eq buy_token_address _sender;
  match is_target with
  | False => e = CodeInvalidSender; ThrowError e
  | True =>
    
    IsSaleActive;
    
    quantity = one;
    price <- nft_price;
    
    is_enough = uint128_ge amount price;
    match is_enough with
    | True =>
      msgs = build_mint_msgs nft_address sender one_uint32;
      send msgs;
      
      overpay = builtin sub amount price;
      overpay_zero = builtin eq overpay zero;
      match overpay_zero with
      | True => 
      | False => TransferMsg buy_token_address sender overpay
      end;
      
      added = builtin add price nft_price_increase;
      nft_price := added;
      
      e = {_eventname : "Bought morph"; price: price; buy_token_address: buy_token_address};
      event e
    | False =>
      e = CodeInsufficientFunds; ThrowError e
    end
  end
end


transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128) end