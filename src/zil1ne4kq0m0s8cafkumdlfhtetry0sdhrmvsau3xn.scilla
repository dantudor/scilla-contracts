
scilla_version 0

import ListUtils

library Reputation
type Error =
| NotAuthorized
| NoStagedAdmin
| ReputationAlreadyExists
| ReputationDoesntExists
type Uint128Pair =
| Uint128Pair of Uint128 Uint128

let make_error =
fun (result: Error) =>
let result_code =
match result with
| NotAuthorized => Int32 -1
| NoStagedAdmin => Int32 -2
| ReputationAlreadyExists => Int32 -3
| ReputationDoesntExists => Int32 -4
end
in
{ _exception: "Error"; code: result_code }

let reputation_streak_factor = "reputation_streak_factor"
let reputation_reward_denominator = ""

let zeroByStr20 = 0x0000000000000000000000000000000000000000
let zero = Uint128 0
let one = Uint128 1
let option_value = tfun 'A => fun( default: 'A ) => fun( input: Option 'A) =>
  match input with
  | Some v => v
  | None => default end
let option_bystr20_value = let f = @option_value ByStr20 in f zeroByStr20
let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let muldiv : Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun (x : Uint128) =>
    fun (y : Uint128) =>
    fun (z : Uint128) =>
      let x256 = uint128_to_uint256 x in
      let y256 = uint128_to_uint256 y in
      let z256 = uint128_to_uint256 z in
      let x_mul_y256 = builtin mul x256 y256 in
      let res256 = builtin div x_mul_y256 z256 in
      let ores128 = builtin to_uint128 res256 in
      match ores128 with
      | None =>
        
        let max_uint128 = Uint128 340282366920938463463374607431768211455 in
        let fourtytwo128 = Uint128 42 in
        builtin mul max_uint128 fourtytwo128
      | Some res128 =>
        res128
      end



let find_discount: Uint128 -> List Uint128Pair -> Uint128 =
    fun(score: Uint128) => fun(tiers: List Uint128Pair) =>
    let return_none_if_score_lt_threshold: Uint128 -> Uint128Pair -> Option Uint128 =
    fun(acc: Uint128) => fun(tier: Uint128Pair) =>
        match tier with
        | Uint128Pair threshold discount =>
            let lt_threshold = builtin lt score threshold in
            match lt_threshold with
            | True => None {Uint128}
            | False => Some {Uint128} discount
            end
        end in
    let fold = @list_foldl_while Uint128Pair Uint128 in
    
    fold return_none_if_score_lt_threshold zero tiers

contract Reputation(
    init_admin: ByStr20,
    init_streak_factor: Uint128,
    init_rewards_denom: Uint128
)
field admin: ByStr20 = init_admin
field staging_admin: Option ByStr20 = None {ByStr20}

field address_to_discount: Map ByStr20 Uint128 = Emp ByStr20 Uint128

field address_to_reputation: Map ByStr20 Uint128 = Emp ByStr20 Uint128


field tiers: List Uint128Pair = Nil {Uint128Pair}
field streak_factor: Uint128 = init_streak_factor
field rewards_denom: Uint128 = init_rewards_denom
field temp_reputation_to_add: Uint128 = zero

procedure ThrowError(err: Error)
    e = make_error err;
    throw e
end



procedure AssertAddrEquality(ad1: ByStr20, ad2: ByStr20)
    is_same = builtin eq ad1 ad2;
    match is_same with
    | False => e = NotAuthorized; ThrowError e
    | True =>
    end 
end
procedure IsAdmin()
    tmp <- admin;
    AssertAddrEquality tmp _sender
end
transition SetStagedAdmin(staged: ByStr20)
    IsAdmin;
    opt_staged = Some {ByStr20} staged;
    staging_admin := opt_staged
end
transition ClaimStagedAdmin()
    option_staged <- staging_admin;
    staged = option_bystr20_value option_staged;
    staged_is_sender = builtin eq _sender staged;
    match staged_is_sender with
    | False => e = NotAuthorized; ThrowError e
    | True => admin := staged
    end
end



procedure UpdateDiscount(addr: ByStr20, score: Uint128)
    cur_tiers <- tiers;
    discount = find_discount score cur_tiers;
    address_to_discount[addr] := discount
end
procedure AssertReputationDoesntExist(addr: ByStr20)
    if_exists <- exists address_to_reputation[addr];
    match if_exists with
    | True => e = ReputationAlreadyExists; ThrowError e
    | False =>
    end
end
procedure DeleteRep(addr: ByStr20)
    delete address_to_reputation[addr];
    delete address_to_discount[addr]
end
procedure CreateRep(addr: ByStr20, score: Uint128)
    address_to_reputation[addr] := score;
    UpdateDiscount addr score
end
transition SetTiers(to_set: List Uint128Pair)
    IsAdmin;
    tiers := to_set
end
transition CreateReputation(addr: ByStr20, init_score: Uint128)
    IsAdmin;
    AssertReputationDoesntExist addr;
    CreateRep addr init_score
end
transition GiveReputation(addr: ByStr20, to_add: Uint128)
    IsAdmin;
    option_score <- address_to_reputation[addr];
    match option_score with
    | None => e = ReputationDoesntExists; ThrowError e
    | Some score =>
        added = builtin add score to_add;
        CreateRep addr added
    end
end
transition UpdateStreakFactorAndRewardsDenom(streak: Uint128, denom: Uint128)
    IsAdmin;
    streak_factor := streak;
    rewards_denom := denom
end




procedure CalculateReputationMint(rewards: Uint128, streak: Uint128)
    factor <- streak_factor;
    denom <- rewards_denom;
    ssf = builtin add factor streak;
    denom = builtin mul factor denom;
    to_add = muldiv ssf rewards denom;
    temp_reputation_to_add := to_add
end
transition MintMeReputation(rewards: Uint128, streak: Uint128)
    option_score <- address_to_reputation[_sender];
    match option_score with
    | None => 
    | Some score =>
        CalculateReputationMint rewards streak;
        to_add <- temp_reputation_to_add;
        temp_reputation_to_add := zero;
        added = builtin add score to_add;
        CreateRep _sender added
    end
end

transition MoveToNewAddress(new_address: ByStr20)
    AssertReputationDoesntExist new_address;
    option_score <- address_to_reputation[_sender];
    match option_score with
    | None => e = ReputationDoesntExists; ThrowError e
    | Some score =>
        DeleteRep _sender;
        CreateRep new_address score
    end
end