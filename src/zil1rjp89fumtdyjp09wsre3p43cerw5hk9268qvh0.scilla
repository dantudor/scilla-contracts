(*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*)

scilla_version 0

(*************************)
(* The tyronInit library *)
(*************************)

library TyronInit
    (* Messages *)
    (************)
    let one_msg =
        fun (msg: Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

    (* Constants *)
    (*************)
    let zero = Uint128 0

    (* Error events *)
    (****************)
    type Error =
    | CodeNotPungtas

    let make_error =
        fun (result : Error) =>
        let result_code = 
            match result with
            | CodeNotPungtas    => Int32 -1
            end
        in
        { _exception : "Error"; code : result_code }

(********************************)
(* The tyronInit smart-contract *)
(********************************)

contract TyronInit(
(* Immutable fields declaration *)
(********************************)
    pungtas_addr: ByStr20        (* address of the Pungtas Danish Foundation *)
)

(* Mutable fields declaration *)
(******************************)
    field tyron_smart_contracts: Map String String = Emp String String        (* key: version, value: encoded Base64URL *)
    field operation_cost: Uint128 = Uint128 1000000000000        (* the cost of processing a DID operation - the initial cost is equal to 1 ZIL *)
    field client_commission: Uint128 = Uint128 49        (* the % of the operation_cost that the client gets as payment *)       

(* Procedures *)
(**************)

    procedure ThrowError(err: Error)
        e = make_error err;
        throw e
    end

    procedure IsPungtas()
        is_pungtas = builtin eq pungtas_addr _sender;
        match is_pungtas with
        | True =>
        | False =>
            err = CodeNotPungtas;
            ThrowError err
        end
    end

(* Transitions *)
(***************)

    transition Initialize()
        this_cost <- operation_cost;
        this_client_commission <- client_commission;
        msg_init = {
            _tag: "InitParameters";
            _recipient: _sender;
            _amount: zero;
            operationCost: this_cost;
            foundationAddress: pungtas_addr;
            clientCommission: this_client_commission
        };
        init = one_msg msg_init;
        send init
    end

    transition SetSmartContract(
        version: String,
        encodedContract: String
    )
        IsPungtas;
        tyron_smart_contracts[version] := encodedContract;
        e = {
            _eventname: "UpdatedTyronSmartContracts";
            smart_contract_version: version;
            encoded_smart_contract: encodedContract
        };
        event e
    end
