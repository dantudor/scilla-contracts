scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils as BoolU

library OpenAuction

let check_update = 
  fun (bs : Map ByStr20 Uint128) =>
  fun (sender : ByStr20) =>
  fun (amount : Uint128) =>
    let c = builtin contains bs sender in
    match c with 
    | False => 
      let bs1 = builtin put bs sender amount in
      Some {Map ByStr20 Uint128} bs1 
    | True  => None {Map ByStr20 Uint128}
    end

let blk_leq =
  fun (blk1 : BNum) =>
  fun (blk2 : BNum) =>
    let bc1 = builtin blt blk1 blk2 in 
    let bc2 = builtin eq blk1 blk2 in 
    BoolU.orb bc1 bc2


let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg
    

let first_bid_accepted_code = Int32 1
let bid_accepted_code = Int32 2
let money_sent_code = Int32 3
let auction_end_code = Int32 4
let late_to_bid_code = Int32 5
let too_early_to_bid_code = Int32 6
let bid_too_low_code = Int32 7
let nothing_to_withdraw_code = Int32 8
let auction_is_still_on_code = Int32 9
let codeWrongToken = Int32 10
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)


contract OpenAuction
(*  Parameters *)
(auctionStart : BNum,
 biddingTime  : Uint128,
 beneficiary  : ByStr20,
 startList : Uint128,
 tokenAddress : ByStr20,
 contract_owner : ByStr20,
 twitterHandle: String
 
)

(* Mutable fields *)

field ended : Bool = False
field highestBidder  : Option ByStr20  = None {ByStr20}
field highestBid     : Uint128 = Uint128 0
field pendingReturns : Map ByStr20 Uint128 = Emp ByStr20 Uint128
field allBids : Map Uint128 ByStr20 = Emp Uint128 ByStr20


transition AddFunds() accept end


(*Accept Tokens*) 
transition RecipientAcceptTransferFrom (initiator: ByStr20 ,sender : ByStr20, recipient : ByStr20, amount : Uint128) 
 isTokenContract = builtin eq tokenAddress _sender;
   match isTokenContract with
     |True =>
     |False => 
      err = { _exception : "CodeWrongToken"; code : codeWrongToken };
      throw err
 
    end 
end 


transition TransferFromSuccessCallBack(
  initiator : ByStr20,
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end

transition TransferSuccessCallBack(
  sender : ByStr20,
  recipient : ByStr20,
  amount : Uint128
)
end



(* Transition 1: bidding *)

transition Bid (sptAmount : Uint128)

  blk <- & BLOCKNUMBER;
  endtime = builtin badd auctionStart biddingTime;
  after_end = let one = Uint128 1 
    in builtin badd endtime one;
  e <- ended;
  in_time = blk_leq after_end blk;
  flag1 = BoolU.orb in_time e;
  early = blk_leq blk auctionStart;
  match early with
  | True =>
    err = { _exception : "Too_early_to_bid_code"; code : too_early_to_bid_code };
      throw err
  | False =>
    match flag1 with
    | True => 
      err = { _exception : "Late_to_bid_code"; code : late_to_bid_code };
      throw err
      
    | False =>
      hb <- highestBid;
      
      
      (* Checks if the bid is too low *)
      goodBid = builtin lt startList sptAmount;
      match goodBid with
        |False =>
           err = { _exception : "Bid_too_low_code"; code : bid_too_low_code };
      throw err
      
      |True =>
      
      sufficientBid = builtin lt hb sptAmount;
      match sufficientBid with 
      | False =>
        
         err = { _exception : "Bid_too_low_code"; code : bid_too_low_code };
      throw err
        
      | True =>
        
        
        
        allBids[sptAmount] :=  _sender;
   
        msg = {_tag : "TransferFrom"; _recipient: tokenAddress; _amount: Uint128 0;
             from: _sender; to: _this_address; amount: sptAmount};
      msgs = one_msg msg;
      send msgs;
      
     
        
        hbPrev <- highestBidder;
        
        match hbPrev with
        | Some prevHighestBidder =>
          (* There is already a highest bidder *)
          option_pendingReturnsForPrevHB <- pendingReturns[prevHighestBidder];
          
          getPRForPrevHighestBidder = match option_pendingReturnsForPrevHB with
        | Some pendingReturnsForPrevHB =>
          (* User already has some balance in the pending returns that is not claimed *)
          builtin add hb pendingReturnsForPrevHB
        | None => hb
        (* Prev highest bidder has no pending returns. *)
        end;
      pendingReturns[prevHighestBidder] := getPRForPrevHighestBidder;
      
      (* Update the highest bidder *)
      bidder = Some {ByStr20} _sender;
      highestBidder := bidder;
      highestBid := sptAmount;
      a = {_eventname: "Bid"; code: bid_accepted_code; addr: _sender; amount: sptAmount};
      event a
      | None =>
        (* Process first bid *)
        first_bidder = Some {ByStr20} _sender;
        highestBidder := first_bidder;
        highestBid := sptAmount;
        b = {_eventname: "Bid"; code: first_bid_accepted_code; addr: _sender; amount: sptAmount};
        event b
        end
      end
    end
   end
  end
end

(* Transition 2: claiming money back *)
transition Withdraw ()
  prs <- pendingReturns;
  pr = builtin get prs _sender;
  match pr with
  | None =>
    
    err = { _exception : "Nothing_to_withdraw_code"; code : nothing_to_withdraw_code };
      throw err
    
  | Some v =>
    delete pendingReturns[_sender];
    e = {_eventname: "Withdraw Successful"; addr: _sender};
    event e;
    msg  = {_tag : "Transfer"; _recipient : tokenAddress; _amount: Uint128 0; 
      to: _sender; amount: v};
    msgs = one_msg msg;
    send msgs
  end 
end

 
(* Transition 3: auction ends *)
transition AuctionEnd ()
  blk <- & BLOCKNUMBER;
  e <- ended;
  t1 = builtin badd auctionStart biddingTime;
  t2 = blk_leq t1 blk;
  t3 = BoolU.negb e;
  t4 = BoolU.andb t2 t3;
  match t4 with
  | False =>
    
    err = { _exception : "Auction_is_still_on_code"; code : auction_is_still_on_code };
      throw err
    
  | True =>
    val = True;
    ended := val;
    hb <- highestBid;
    c = {_eventname: "Auction ended"; highest_bid: hb};
    event c;
    msg  = {_tag : "Transfer"; _recipient : tokenAddress; _amount: Uint128 0; to: contract_owner; amount: hb};
    msgs = one_msg msg;
    send msgs
  end
end
