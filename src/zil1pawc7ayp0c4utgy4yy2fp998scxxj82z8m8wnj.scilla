scilla_version 0

library DragonZILNameLib

type Error =
  | CodeNotOwner
  | CodeNotFound
  | CodeMaxLen

let zero128 = Uint128 0

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg


let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeNotOwner => Int32 -1
      | CodeNotFound => Int32 -2
      | CodeMaxLen   => Int32 -3
      end
    in
    { _exception : "Error"; code : result_code }

contract DragonZILNameContract
(
  contract_owner: ByStr20,
  main: ByStr20 with contract
    field token_owners: Map Uint256 ByStr20
  end,
  necropolis: ByStr20,
  zlp: ByStr20
)

field price_curve : Uint128 = Uint128 1000000000000000000
field max_len : Uint32 = Uint32 10
field dragons_name: Map Uint256 String = Emp Uint256 String

procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

procedure IsContractOwner()
  is_contract_owner = builtin eq contract_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure CheckToeknOwner(token_id: Uint256)
  some_owner <-& main.token_owners[token_id];
  owner = option_address _this_address some_owner;
  is_owner = builtin eq owner _sender;

  match is_owner with
  | True =>
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

procedure CheckLen(name: String)
  max <- max_len;
  l = builtin strlen name;
  is_lt = builtin lt l max;

  match is_lt with
  | True =>
  | False =>
    err = CodeMaxLen;
    ThrowError err
  end
end

procedure CallTransferFrom(amount: Uint128, from: ByStr20, to: ByStr20)
  is_zero = builtin eq zero128 amount;

  match is_zero with
  | False =>
    call_transfer_zlp = {
      _tag: "TransferFrom";
      _recipient: zlp;
      _amount: zero128;
      from: from;
      to: to;
      amount: amount
    };
    msgs = one_msg call_transfer_zlp;
    send msgs
  | True =>
  end
end

transition SetName(name: String, token_id: Uint256)
  CheckToeknOwner token_id;
  CheckLen name;

  price <- price_curve;

  CallTransferFrom price _sender necropolis;
  dragons_name[token_id] := name;

  e = {
    _eventname: "NameWasChanged";
    name: name;
    token_id: token_id
  };
  event e
end

transition SetCurve(curve: Uint128)
  IsContractOwner;

  price_curve := curve
end

transition SetMaxLen(max: Uint32)
  IsContractOwner;

  max_len := max
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end