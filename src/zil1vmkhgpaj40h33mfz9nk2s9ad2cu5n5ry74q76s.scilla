scilla_version 0

library ProxyUnicutes

let zero = Uint128 0
let one = Uint128 1
let uint32_one = Uint32 1
let false = False
let true = True

(* returns singleton List Message *)
let one_msg =
    fun (msg : Message) =>
        let nil_msg = Nil {Message} in
        Cons {Message} msg nil_msg

(* Error codes *)
type Error =
| CodeWrongAmount
| CodeDeactivated
| CodeProxyClosed
| CodeNotOwner
| CodeNoEggsLeft
let make_error =
  fun (result: Error) =>
    let result_code = 
      match result with
      | CodeWrongAmount       => Int32 -1
      | CodeDeactivated       => Int32 -2
      | CodeProxyClosed       => Int32 -3
      | CodeNotOwner          => Int32 -4
      | CodeNoEggsLeft        => Int32 -5
      end
    in
    { _exception : "Error"; code : result_code }

contract UnicutesProxy
(
  contract_owner: ByStr20,
  total_eggs: Uint32,
  unicutes_egg_smart_contract: ByStr20,
  name : String,
  symbol: String
)

(* 100 $ZIL = 100000000000000 QA *)
field egg_hatching_time         : Uint32 = Uint32 100
field is_proxy_open : Bool = True
field eggs_purchased : Uint32 = Uint32 0

procedure ThrowError(err: Error)
  e = make_error err;
  throw e
end


(* ================ *)
(* Admin Procedures *)
(* ================ *)

procedure IsProxyOpen()
  is_open <- is_proxy_open;
  match is_open with
  | True =>
  | False =>
    err = CodeProxyClosed;
    ThrowError err
  end
end

procedure IsOwner()
  is_owner = builtin eq contract_owner _sender;
  match is_owner with
  | True =>
  | False =>
    err = CodeNotOwner;
    ThrowError err
  end
end

(* ==================== *)
(* Anonymous Procedures *)
(* ==================== *)

procedure IsMoreEggsLeft()
  purchased <- eggs_purchased;
  is_equal = builtin eq purchased total_eggs;
  match is_equal with
  | False =>
    new_eggs_purchased = builtin add purchased uint32_one;
    eggs_purchased := new_eggs_purchased
  | True =>
    err = CodeNoEggsLeft;
    ThrowError err
  end
end

transition CloseProxy()
   IsOwner;
   val = False;
   is_proxy_open := val;
   e = {
    _eventname: "CloseProxy";
    amount : _amount
  };
  event e
end

transition MintEgg(receiver: ByStr20)
  IsProxyOpen;
  IsOwner;
  IsMoreEggsLeft;
  accept;
  time <- egg_hatching_time;
  msg_to_unicutes_egg = {
    _tag          : "BuyEgg";
    _recipient    : unicutes_egg_smart_contract;
    _amount       : zero;
    hatching_time : time;
    sender        : receiver
  };
  msg = one_msg msg_to_unicutes_egg;
  send msg
end

transition Withdraw(amount: Uint128)
  IsOwner;
  msg  = {_tag : ""; _recipient : _sender; _amount : amount};
  msgs = one_msg msg;
  send msgs
end